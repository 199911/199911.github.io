<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coding Sunday</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://199911.github.io/"/>
  <updated>2017-01-22T12:54:55.000Z</updated>
  <id>http://199911.github.io/</id>
  
  <author>
    <name>Sunday Ku</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&quot;CSS: The Definitive Guide 3rd Edition&quot; part 2</title>
    <link href="http://199911.github.io/review/2017/01/22/css-the-definitive-guide-3rd-edition-2/"/>
    <id>http://199911.github.io/review/2017/01/22/css-the-definitive-guide-3rd-edition-2/</id>
    <published>2017-01-21T16:00:00.000Z</published>
    <updated>2017-01-22T12:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-Values-and-Units"><a href="#4-Values-and-Units" class="headerlink" title="4 Values and Units"></a>4 Values and Units</h1><ul>
<li>There are only 17 defined color in css 2.1, but CSS 3 have 140 color, which recongized by most browsers.</li>
<li><code>rgb(50%, 0%, 100%)</code> is a valid color</li>
<li>The “web-safe” colors are those colors that generally avoid dithering on 256-color computer systems<ul>
<li>Value can be express in multiple of 20%</li>
<li>I think we don’t need to care these nowadays</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="Length-units"><a href="#Length-units" class="headerlink" title="Length units"></a>Length units</h2><ul>
<li>Valid units: <code>in</code>, <code>cm</code>, <code>mm</code>, <code>pt</code>, <code>pc</code> (picas)</li>
<li><code>em</code> and <code>ex</code> stand for “em-height” and “x-height”<ul>
<li>Different fonts with same <code>em</code> may have different <code>ex</code>, as the font design is different<ul>
<li>But in practical, not all font have <code>ex</code> defined, will fallback to convention (<code>0.5 em</code> = <code>1 ex</code>)</li>
</ul>
</li>
</ul>
</li>
<li><code>1 em</code> = <code>14 px</code></li>
<li><code>12 pt</code> = <code>1 pc</code></li>
<li><code>72 pt</code> = <code>1 in</code> is only correct in classic mac, as the monitor have different ppi (pt per in).<ul>
<li>Don’t assume OS can convert <code>pt</code> to accurate length on monitor, it is the reason to avoid <code>pt</code>.</li>
</ul>
</li>
<li><code>in</code> is a reliable unit</li>
<li>Absolute unit (in, cm, mm) is more useful in <code>print</code> media</li>
<li><code>px</code> may scale when print, so it is defined as relative unit</li>
<li><code>ex</code> is not commonly used, use <code>em</code> or <code>px</code> is better</li>
</ul>
<h2 id="List-of-value"><a href="#List-of-value" class="headerlink" title="List of value"></a>List of value</h2><ul>
<li>number</li>
<li>color</li>
<li>uri</li>
<li>keyword</li>
<li>angle (deg, grad, rad)</li>
<li>time</li>
<li>frequency</li>
</ul>
<h1 id="5-Fonts"><a href="#5-Fonts" class="headerlink" title="5 Fonts"></a>5 Fonts</h1><ul>
<li>Don’t forget provide fallback for font family</li>
<li>Use quotation mark as font family may have special characters</li>
<li>Fonts have variant<ul>
<li>Example: Zurich Bold, Zurich Black, Zurich UltraBlack, Zurich Light, and Zurich Regular</li>
<li><code>font-weight</code> is using different font variant</li>
<li><code>font-weight</code> to font variant conversion is complex, check the book if needed.</li>
</ul>
</li>
<li>lighter / bolder is relative value<ul>
<li>Increase / decrease <code>font-weight</code> inherit by parent</li>
</ul>
</li>
<li>Font size is the size of em box<ul>
<li>From baseline to extra leading</li>
<li>Font size is not size of any characters</li>
</ul>
</li>
<li>There absolutive and relative font size value keywords<ul>
<li>Absolute keywords: (increase or decrease by a constant factor for each keywords)</li>
<li>Relative keywords: (larger / smaller) same factor as absolute keywords<ul>
<li>Relative keywords in font size and weight is useful when define style of tags like <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>Percentage value in font-size is effectively cumulative<ul>
<li>PS: Round off to integer</li>
</ul>
</li>
<li>Small caps font variant<ul>
<li>Instead of upper and lowercase letters, a small-caps font employs uppercase letters of different sizes.</li>
</ul>
</li>
<li><code>font-stretch</code> and <code>font-size-adjust</code> are not implemented</li>
</ul>
<h2 id="System-fonts"><a href="#System-fonts" class="headerlink" title="System fonts"></a>System fonts</h2><p>These are used to take the font size, family, weight, style, and variant of elements of the operating system, and apply them to an element.</p>
<ul>
<li>caption</li>
<li>icon</li>
<li>menu</li>
<li>message-box</li>
<li>small-caption</li>
<li>status-bar</li>
</ul>
<h2 id="Font-synthesis"><a href="#Font-synthesis" class="headerlink" title="Font synthesis"></a>Font synthesis</h2><p>From <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis" target="_blank" rel="external">MDN</a>, <code>font-synthesis</code> control the generaton of missing typefaces</p>
<h1 id="6-Text-Properties"><a href="#6-Text-Properties" class="headerlink" title="6 Text Properties"></a>6 Text Properties</h1><ul>
<li><p><code>text-indent</code></p>
<ul>
<li>Only works on block level elements. Use padding in inline elements</li>
<li>Percentage is relative to the parent’s width</li>
<li>Always inherited the computed value, not declared value</li>
</ul>
</li>
<li><p><code>text-align</code> can be ugly when</p>
<ul>
<li>the container is too narrow</li>
<li>the word are too long (can use hyphenation)</li>
</ul>
</li>
<li><p><code>line-height</code></p>
<ul>
<li>The line will be short when the children have a larger font size</li>
<li>Use factors (number without value) to overcome inheritances problem<ul>
<li>Because the value is relative to font size</li>
</ul>
</li>
</ul>
</li>
<li><p><code>vertical-align</code> does not work on block elements</p>
<ul>
<li>We can use it to align <code>inline-block</code> and <code>inline</code> elements</li>
</ul>
</li>
<li><p><code>text-decoration</code> is not inherited, but the decoration is still appear in children (it is from parent, not children’s decoration)</p>
<ul>
<li>To remove the children’s decoration, use text-decoration: none;<ul>
<li>In other elements, we use <code>initial</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="White-space"><a href="#White-space" class="headerlink" title="White space"></a>White space</h2><ul>
<li>pre: keep all, no auto line wrapping (no line break unless there are new line character)</li>
<li>pre-wrap: keep all space, and line wrap normally</li>
<li>pre-line: collapse the space within the same line, and line wrap normally</li>
</ul>
<h2 id="Text-direction"><a href="#Text-direction" class="headerlink" title="Text direction"></a>Text direction</h2><p><code>direction</code> affects the writing direction of text in a block-level element, the direction of table column layout, the direction in which content horizontally overflows its element box, and the position of the last line of a fully justified element.<br>For inline elements, direction applies only if the property unicode-bidi is set to either embed or bidi-override.<br>For top to bottom language, CSS 3 have writing mode</p>
<h1 id="7-Basic-Visual-Formatting"><a href="#7-Basic-Visual-Formatting" class="headerlink" title="7 Basic Visual Formatting"></a>7 Basic Visual Formatting</h1><ul>
<li>margin can be negative, but size, padding and border cannot be negative</li>
<li>The computed value of percentage size is taken as the height of the containing block-level</li>
<li>Size <code>auto</code> is the minimum size that contain the whole content</li>
</ul>
<h2 id="Collapsing-margin"><a href="#Collapsing-margin" class="headerlink" title="Collapsing margin"></a>Collapsing margin</h2><p>Only vertical will collapse. not horizontal margins. For other case, refer to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="external">MDN</a>.</p>
<ul>
<li>anonymous text<ul>
<li>the texts in inline elements but don’t inside the nested inline element</li>
</ul>
</li>
<li>em box</li>
<li>inline box</li>
<li>content area</li>
<li>leading<ul>
<li>height of the box = line-height (box of one line)</li>
</ul>
</li>
<li>line box<ul>
<li>shortest box bounds the highest and the lowest points of inline boxes (multi line inline box)</li>
</ul>
</li>
<li>percentage value of vertical-align take value from line-height<ul>
<li>Because vertical-align is align in line level, not block level</li>
</ul>
</li>
<li>Line in the same block can have different computed value of line-height, if we use number without unit<ul>
<li>It is computed base on height of elements in each line.</li>
</ul>
</li>
<li>Characters are usually smaller than their em boxes<ul>
<li>But cursives fonts usually have character glyphs larger than their em boxes.</li>
</ul>
</li>
<li>Adding padding and borders does not affect the height of the inline box</li>
<li>Margin top and bottom does not apply to inline non-replaced elements</li>
<li>Inline replaced element is align to baseline<ul>
<li>which may create a gap which is half leading</li>
</ul>
</li>
<li>Computed value of display can change if an element is floated or positioned.</li>
</ul>
<h1 id="8-Padding-Borders-and-Margins"><a href="#8-Padding-Borders-and-Margins" class="headerlink" title="8 Padding, Borders and Margins"></a>8 Padding, Borders and Margins</h1><ul>
<li>Percentage margin depends on parent’s width, even margin-top and margin-bottom<ul>
<li>If margin-top and margin-bottom depends on parent’s height, there will be infinite loop</li>
<li>The treatment of percentage values for top and bottom margins is different for positioned elements<ul>
<li>I guess it is because the size of element does not depends on parent anymore</li>
</ul>
</li>
</ul>
</li>
<li>Margin top and bottom does not work in inline element<ul>
<li>Only line height, font size and vertical align can change the distance between lines</li>
</ul>
</li>
<li>Default border value<ul>
<li>border: none</li>
<li>weight: medium</li>
<li>color: foreground color</li>
</ul>
</li>
<li>In CSS 2.1, the element’s background is the background of the content, padding, and border areas.</li>
<li>Border cannot have percentage value</li>
</ul>
<h1 id="9-Colors-and-Backgrounds"><a href="#9-Colors-and-Backgrounds" class="headerlink" title="9 Colors and Backgrounds"></a>9 Colors and Backgrounds</h1><ul>
<li><code>color</code> properties also change border color of elements if <code>border-color</code> is not set.</li>
<li>Many form elements have border by default.</li>
<li>Foreground color can be inherited, but not background.</li>
<li><code>transparent</code> is a color keyword</li>
</ul>
<ul>
<li>Background image with background color<ul>
<li>Serve as fallback when image fail to load</li>
<li>Some image have alpha value<ul>
<li>Background image is on top of background color<ul>
<li>Need some extra CSS to set up image overlay</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>The background image-placement context in CSS 2 and 2.1 is the inner border edge</li>
<li><code>background-attachment</code> attaches image to viewport</li>
</ul>
<h2 id="Class-naming"><a href="#Class-naming" class="headerlink" title="Class naming"></a>Class naming</h2><p>It’s actually better to pick class names that describe the type of information contained within, not the visual effect you’re trying to achieve. It’s preferable to pick a class name which actually mean something and, more importantly, are independent of any presentational concepts. So we don’t need to rename if we want to change the visual effect</p>
<h1 id="10-Floating-and-Positioning"><a href="#10-Floating-and-Positioning" class="headerlink" title="10 Floating and Positioning"></a>10 Floating and Positioning</h1><h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><ul>
<li>Float will convert the element to <code>display: block</code></li>
<li>Negative margin can make a float element higher than parent</li>
<li>when the element is larger than parent it will overflow</li>
<li>An inline box that overlaps with a float has its borders, background, and content all rendered “on top” of the float.</li>
<li>A block box that overlaps with a float has its borders and background rendered “behind” the float, whereas its content is rendered “on top” of the float.</li>
<li>PS: the overlap behavior is independent of source order</li>
<li>Clearance is extra spacing added above an element’s top margin to push it past any floated elements</li>
<li>(percentage) max/min size is useful when use with float elements</li>
</ul>
<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul>
<li>Beside overflow hidden, we can clip the content by <code>clip</code></li>
<li>Clip can have negative value (use with overflow hidden?)<ul>
<li>But the browser implementation is not consistent</li>
</ul>
</li>
<li><code>top: auto;</code> does not align the absolute positioned block vertical center<ul>
<li>It is used to reset the <code>top</code> property</li>
</ul>
</li>
</ul>
<h1 id="11-Table-Layout"><a href="#11-Table-Layout" class="headerlink" title="11 Table Layout"></a>11 Table Layout</h1><ul>
<li>It is impossible to give table cell margin (browser will ignore them)</li>
<li>The position of first table column depends on language direction</li>
<li>The CSS specification discourages, but does not prohibit, the positioning of table cells and other internal table elements.</li>
<li>Table header and footer will be repeated in printed version, if the whole table is not fit in one page</li>
<li>CSS table layout pick the “row primacy” principle:<ul>
<li>User explicitly define row, the browser find the column by calculation (we use <code>tr</code> but no <code>col</code> in table)</li>
<li>In another words, it is row-oriented</li>
</ul>
</li>
<li>Anonymous table object - table with missing cell<ul>
<li>Browser will insert the missing cell automatically</li>
</ul>
</li>
<li>Table layer<ul>
<li>Table elements: cell, row, row groups, columns, columns, table</li>
</ul>
</li>
<li>Table style will be drawn first</li>
<li>Border spacing = cell margin</li>
<li><code>empty-cell: hidden;</code> make browser set empty cell to <code>display: none;</code></li>
</ul>
<h2 id="table-layout"><a href="#table-layout" class="headerlink" title="table-layout"></a>table-layout</h2><ul>
<li><code>auto</code>: the table size is depends on the content</li>
<li><code>fixed</code>: the table size is defined by the first row<ul>
<li><code>fixed</code> layout is fast to render, no need to go through all content</li>
</ul>
</li>
<li>Vertical align content in table center is easy, can use vertical align directly</li>
<li><code>vertical-align</code> will make browser ignore <code>sub</code>, <code>super</code>, <code>text-top</code>, and <code>text-bottom</code> when applied to table cells</li>
<li>Table layout can cause text wrap problem<ul>
<li><code>fixed</code> vs <code>auto</code>?</li>
</ul>
</li>
</ul>
<h1 id="12-List-and-Generated-Content"><a href="#12-List-and-Generated-Content" class="headerlink" title="12 List and Generated Content"></a>12 List and Generated Content</h1><p>CSS does not define the behavior of nonnumeric counting styles for negative counter</p>
<h1 id="13-User-Interface-Styles"><a href="#13-User-Interface-Styles" class="headerlink" title="13 User Interface Styles"></a>13 User Interface Styles</h1><ul>
<li>There are default system style:<ul>
<li>font</li>
<li>color</li>
<li>cursor<ul>
<li>can have graphic cursor</li>
</ul>
</li>
<li>outline</li>
</ul>
</li>
</ul>
<h1 id="14-Non-Screen-Media"><a href="#14-Non-Screen-Media" class="headerlink" title="14 Non-Screen Media"></a>14 Non-Screen Media</h1><h2 id="Print-version"><a href="#Print-version" class="headerlink" title="Print version"></a>Print version</h2><ul>
<li>Some suggested style to apply to printed version<ul>
<li>Overwrite background and font color</li>
<li>No float and no column (width: auto)</li>
<li>Position element out side the page is not a good solution to avoid rendering<ul>
<li>Because this produce lots of blank page in printed version</li>
</ul>
</li>
</ul>
</li>
<li>Some style for paged media<ul>
<li><code>page-break-[before|after|inside]</code> prevent page break insert to the elements</li>
<li><code>widow</code> and <code>orphan</code>: min number of word when having a new page</li>
<li>There are detail page break rules explained in the book</li>
</ul>
</li>
<li>running head: item appear in every page<ul>
<li>use position fixed to implement running head</li>
</ul>
</li>
</ul>
<h2 id="Projection"><a href="#Projection" class="headerlink" title="Projection"></a>Projection</h2><p>Not implemented by many browser</p>
<h2 id="Speaker"><a href="#Speaker" class="headerlink" title="Speaker"></a>Speaker</h2><p>The book mentions styles in CSS2. The CSS3 specification is not finalised.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;4-Values-and-Units&quot;&gt;&lt;a href=&quot;#4-Values-and-Units&quot; class=&quot;headerlink&quot; title=&quot;4 Values and Units&quot;&gt;&lt;/a&gt;4 Values and Units&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;There are only 17 defined color in css 2.1, but CSS 3 have 140 color, which recongized by most browsers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rgb(50%, 0%, 100%)&lt;/code&gt; is a valid color&lt;/li&gt;
&lt;li&gt;The “web-safe” colors are those colors that generally avoid dithering on 256-color computer systems&lt;ul&gt;
&lt;li&gt;Value can be express in multiple of 20%&lt;/li&gt;
&lt;li&gt;I think we don’t need to care these nowadays&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>&quot;CSS: The Definitive Guide 3rd Edition&quot; part 1</title>
    <link href="http://199911.github.io/review/2017/01/16/css-the-definitive-guide-3rd-edition-1/"/>
    <id>http://199911.github.io/review/2017/01/16/css-the-definitive-guide-3rd-edition-1/</id>
    <published>2017-01-15T16:00:00.000Z</published>
    <updated>2017-01-16T15:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>This book have lots of details. Mention the support of some very old browser, like IE 6 and IE 7. It also explain how the CSS algorithm runs, like calculation of line height, size of content box. It is pity that CSS3 is not included.</p>
<p>This book may be a little bit outdated, but it is still worth reading if you want to have a better foundation on CSS, but you still need other books to learn CSS 3 feature which are commonly used.</p>
<a id="more"></a>
<h1 id="1-CSS-and-Documents"><a href="#1-CSS-and-Documents" class="headerlink" title="1 CSS and Documents"></a>1 CSS and Documents</h1><p>Replaced elements and non-replaced elements</p>
<ul>
<li>content is replaced or not</li>
<li>(img is replaced), no actual content, the content is replaced by data outside HTML file</li>
<li>From <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element" target="_blank" rel="external">MDN</a>, their representation is outside the scope of CSS.</li>
</ul>
<p>Alternate style sheet</p>
<ul>
<li>Example: <code>&lt;link rel=&quot;alternate stylesheet&quot; type=&quot;text/css&quot; href=&quot;bigtext.css&quot; title=&quot;Big Text&quot; /&gt;</code></li>
<li>Fecko-based browser support alternate style sheet. browser provide options to let user select the stylesheet.</li>
<li>Will it be downloaded even user not selected them?</li>
<li>What is the behaviour in other browser?</li>
</ul>
<p>Some old browser does not support @import, which can use this ‘feature’ to hide css from old browsers</p>
<ul>
<li>CSS cannot have nested comment, like <code>/* /* nested comment */ */</code> is invalid</li>
</ul>
<h1 id="2-Selector"><a href="#2-Selector" class="headerlink" title="2 Selector"></a>2 Selector</h1><p>Pseudo-elements must be the last item in selector. <code>p:first-line em</code> is not valid, as the last item is <code>em</code> but not <code>first-line</code>. There are limited properties to be applied to <code>first-line</code> and <code>first-letter</code> pseudo-element.</p>
<h1 id="3-Structure-and-the-Cascade"><a href="#3-Structure-and-the-Cascade" class="headerlink" title="3 Structure and the Cascade"></a>3 Structure and the Cascade</h1><ul>
<li>Universal selector have no specificity: (0,0,0,0)<ul>
<li><strong> Universal selector will break inheritance </strong></li>
</ul>
</li>
<li>Attribute selector on id attribute is still consider attribute selector<ul>
<li>It can be a temp fix on specificity war of ID<ul>
<li><code>tr[id=&quot;totals&quot;]</code>, specificity (0,0,0,1)</li>
<li><code>#totals</code>, specificity (0,1,0,0)</li>
</ul>
</li>
</ul>
</li>
<li>Inherit value don’t have specificity, even universal selector can override<ul>
<li><strong> Universal selector will break inheritance </strong></li>
</ul>
</li>
<li>In CSS3 inline style override all non-important style<ul>
<li><code>!important</code> can be used to override inline style written by others</li>
<li>In CSS 2 inline style have the same specificity as id</li>
</ul>
</li>
<li>Non-CSS style (html attribute) can be override by user or author style</li>
</ul>
<h2 id="Exception-of-downward-propagation"><a href="#Exception-of-downward-propagation" class="headerlink" title="Exception of downward propagation"></a>Exception of downward propagation</h2><p>There is upward propagation rule in HTML, background style in <code>body</code> element can be passed to the <code>html</code> element.<br>From <a href="http://stackoverflow.com/questions/5225237/why-does-styling-the-background-of-the-body-element-affect-the-entire-screen/5225321" target="_blank" rel="external">this</a>, if you apply the following CSS to <code>&lt;body /&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  height: 100px;</div><div class="line">  width: 100px;</div><div class="line">  background: black</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>the whole screen will be black, unless you apply <code>html { background: white; }</code> explicitly.</p>
<h2 id="Three-kinds-of-agent-stylesheet"><a href="#Three-kinds-of-agent-stylesheet" class="headerlink" title="Three kinds of agent stylesheet"></a>Three kinds of agent stylesheet</h2><ul>
<li>User agent stylesheet<ul>
<li>The browser’s default style</li>
</ul>
</li>
<li>Reader stylesheet<ul>
<li>The style configure by user</li>
</ul>
</li>
<li>Author stylesheet<ul>
<li>The style provide by the website owner</li>
</ul>
</li>
<li>Priority:<ul>
<li>author &gt; reader &gt; user agent stylesheet</li>
<li>Seems reader does not work if we have reset script</li>
</ul>
</li>
<li>But reader <code>!important</code> style override author style<ul>
<li>Need confirm to test</li>
</ul>
</li>
</ul>
<h2 id="Order-to-apply-CSS-on-element-with-pseudo-classes"><a href="#Order-to-apply-CSS-on-element-with-pseudo-classes" class="headerlink" title="Order to apply CSS on element with pseudo-classes"></a>Order to apply CSS on element with pseudo-classes</h2><ul>
<li>An element can have multiple pseudo class, if apply in wrong other, some styles will never be applied</li>
<li>The order: <code>:link</code>, <code>:visited</code>, <code>:hover</code>, <code>:active</code><ul>
<li>mnemonic “LoVe - HA”</li>
</ul>
</li>
<li>Define all combination is also a solution</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This book have lots of details. Mention the support of some very old browser, like IE 6 and IE 7. It also explain how the CSS algorithm runs, like calculation of line height, size of content box. It is pity that CSS3 is not included.&lt;/p&gt;
&lt;p&gt;This book may be a little bit outdated, but it is still worth reading if you want to have a better foundation on CSS, but you still need other books to learn CSS 3 feature which are commonly used.&lt;/p&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="http://199911.github.io/diary/2017/01/08/npm/"/>
    <id>http://199911.github.io/diary/2017/01/08/npm/</id>
    <published>2017-01-07T16:00:00.000Z</published>
    <updated>2017-01-08T09:44:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Just read the <a href="https://docs.npmjs.com/getting-started" target="_blank" rel="external">“Getting Started” section</a> of npm docs.</p>
<h2 id="Update-npm-packages"><a href="#Update-npm-packages" class="headerlink" title="Update npm packages"></a>Update npm packages</h2><p>We can use <code>npm outdated</code> to check which package is outdated and <code>npm update &lt;package name&gt;</code> to update.</p>
<h2 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h2><p>The versioning number look likes “<major release="">.<minor release="">.<patch release="">“<br>Say the current version is 1.0.0:</patch></minor></major></p>
<ul>
<li>If a bug fix is publish, new version should be 1.0.1 (Patch release)</li>
<li>If new features which don’t break existing features is publish, new version should be 1.1.0 (Minor release)</li>
<li>If there is changes which break backward, new version should be 2.0.0 (Major release)</li>
</ul>
<p>We can close our eyes if the update is minor or patch release. If it is Major release, we need to take extra cares.</p>
<h2 id="Host-npm-package-with-github"><a href="#Host-npm-package-with-github" class="headerlink" title="Host npm package with github"></a>Host npm package with github</h2><p>It is possible to use github to host npm package. Not sure does it works with private github repo. <a href="http://stackoverflow.com/questions/16350673/depend-on-a-branch-or-tag-using-a-git-url-in-a-package-json" target="_blank" rel="external">REF</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just read the &lt;a href=&quot;https://docs.npmjs.com/getting-started&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“Getting Started” section&lt;/a&gt; of npm docs.&lt;
    
    </summary>
    
      <category term="Diary" scheme="http://199911.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>How to fallback CSS file to different CDN</title>
    <link href="http://199911.github.io/diary/2016/12/05/how-to-fallback-to-different-CDN/"/>
    <id>http://199911.github.io/diary/2016/12/05/how-to-fallback-to-different-CDN/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2016-12-05T15:32:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>A user in UK report our site is broken. From the captured screen, it is easy to it is because CSS file fail to load. After testing using <a href="https://www.webpagetest.org/" target="_blank" rel="external">Webpage Test</a>, I found out the machine in London fail to get the CSS file from MAXCDN. After long comunication with the customer support of CDN and lots of black box remote testing, they confirmed it is some local network error. MaxCDN and I can do nothing but wait until ISP fix the network.</p>
<p>I come up an idea, can we fallback to other CDN automatically if the current one is fail?</p>
<a id="more"></a>
<h2 id="Javascript-file-detection"><a href="#Javascript-file-detection" class="headerlink" title="Javascript file detection"></a>Javascript file detection</h2><p>Actually, it is very common in Javascript files. Many dependency management tools ,like require.js and yepnope.js, have built in CDN fallback feature for javascript. <a href="http://stackoverflow.com/questions/1014203/best-way-to-use-googles-hosted-jquery-but-fall-back-to-my-hosted-library-on-go" target="_blank" rel="external">The implementation is very simple</a>. For example, <code>!!window.jQuery</code> can be used to check jQuery is loaded or not.</p>
<h2 id="CSS-file-detection-in-fallback-js"><a href="#CSS-file-detection-in-fallback-js" class="headerlink" title="CSS file detection in fallback.js"></a>CSS file detection in fallback.js</h2><p>CSS have nothing do with javascript, how can we detect the style is loaded or not? From the source code of <a href="https://github.com/dolox/fallback/blob/v1/fallback.js#L212" target="_blank" rel="external">fallback.js</a>, we can use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets" target="_blank" rel="external">style sheets web apis</a>. We can get every single rules in the styleSheets by javascript. In fallback.js, <code>selectorText</code> is used to detect the style sheet. Notices that it use exact string matching, for example, if you only have a rules <code>.css.is.loaded { display: none; }</code> and the checking of <code>.loaded</code> will be fail, because the value of <code>selectorText</code> is <code>.css.is.loaded</code></p>
<h2 id="Style-Sheets-API-fallback"><a href="#Style-Sheets-API-fallback" class="headerlink" title="Style Sheets API fallback"></a>Style Sheets API fallback</h2><p><a href="http://caniuse.com/#search=stylesheets" target="_blank" rel="external">IE 11 and Edge 14 still not support style sheets api</a>, the fallback.js implementation does not works. In this <a href="http://eddmann.com/posts/providing-local-js-and-css-resources-for-cdn-fallbacks/" target="_blank" rel="external">article</a>, it suggests to have a string match which the background color style: <code>$(&#39;body&#39;).css(&#39;color&#39;) !== &#39;rgb(51, 51, 51)&#39;)</code>. It looks not very reliable, as the css need to have exactly the same format as <code>rgb(DD, DD, DD)</code>, I have check a few browser and the string format is exactly the same.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A user in UK report our site is broken. From the captured screen, it is easy to it is because CSS file fail to load. After testing using &lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;Webpage Test&lt;/a&gt;, I found out the machine in London fail to get the CSS file from MAXCDN. After long comunication with the customer support of CDN and lots of black box remote testing, they confirmed it is some local network error. MaxCDN and I can do nothing but wait until ISP fix the network.&lt;/p&gt;
&lt;p&gt;I come up an idea, can we fallback to other CDN automatically if the current one is fail?&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://199911.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>文集十一</title>
    <link href="http://199911.github.io/insight/2016/11/26/readings-11/"/>
    <id>http://199911.github.io/insight/2016/11/26/readings-11/</id>
    <published>2016-11-25T16:00:00.000Z</published>
    <updated>2016-11-26T10:49:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我要成為前端工程師！給-JavaScript-新手的建議與學習資源整理"><a href="#我要成為前端工程師！給-JavaScript-新手的建議與學習資源整理" class="headerlink" title="我要成為前端工程師！給 JavaScript 新手的建議與學習資源整理"></a><a href="http://www.inside.com.tw/2016/02/19/javascript-novice-advice-and-learning-resources" target="_blank" rel="external">我要成為前端工程師！給 JavaScript 新手的建議與學習資源整理</a></h1><ul>
<li>當睇唔明人地D code<ul>
<li>查書<ul>
<li>唔知要查嘅野係邊頁</li>
<li>要先對成個知識體系有基本了解，先可以有效率咁search</li>
</ul>
</li>
<li>查Google<ul>
<li>唔知用咩keyword去search</li>
<li>同查書一樣</li>
</ul>
</li>
<li>試+靠估<ul>
<li>可能會得出錯嘅結論，學左D錯嘅野</li>
</ul>
</li>
</ul>
</li>
<li>做住學<ul>
<li>要有觀念打底先扎實<ul>
<li>都係要了解左成個知識體系先</li>
</ul>
</li>
<li>我好同意E一點，要打好底咁先學到野。因為做野果時好多時都有deadline，一定要好有效率咁學，唔係最後係壓力下，只係patch到work就算，可唔到可以reuse嘅knowledge。</li>
</ul>
</li>
<li>會寫的多、看懂的少<ul>
<li>如果你還是用一知半解的觀念去開發，你會花上大把大把的時間在除錯、鬼打牆、生悶氣、捶心肝。<ul>
<li>其實就係leaky abstraction 嘅問題<ul>
<li>當你要maintain D code，就算D third party library 好勁，好可靠，都要花時間去理解佢點運作。</li>
<li>因為世上係冇完美嘅abstraction，當一遇到底層嘅問題，必需要對library有深入嘅了解先solve到。</li>
<li>當出左事先抽時間去學，好可能會趕唔切，因為未必可以locate到個問題係邊個abstraction layer出事。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>當中推介D書遲D抽時間速睇。</li>
</ul>
<a id="more"></a>
<h1 id="閱讀程式碼的心理層面"><a href="#閱讀程式碼的心理層面" class="headerlink" title="閱讀程式碼的心理層面"></a><a href="http://www.codemud.net/~thinker/GinGin_CGI.py/show_id_doc/497" target="_blank" rel="external">閱讀程式碼的心理層面</a></h1><p>講點樣睇code，其實好多篇文都講類似嘅野</p>
<ol>
<li>先掌握整體結構，了解各檔案、目錄、模組嘅作用<ul>
<li>咁先可以知道自己係邊個abstraction layer，<ul>
<li>揾到自已想睇嘅code同skip D 唔重要嘅野</li>
</ul>
</li>
</ul>
</li>
<li>靠file, function 同 variable name去估D code做咩<ul>
<li>前提都要D code都要寫得好</li>
</ul>
</li>
<li>睇class 同 function declaration<ul>
<li>Interface 係這個abstraction object 之間溝通嘅方法</li>
<li>睇完structure，估到個大約結構可以睇下 interface 驗證自己嘅想法</li>
</ul>
</li>
<li>先睇Data structure 再睇 code<ul>
<li>Code 係用黎process data, program 就好似一條變化緊嘅data stream咁，由stream嘅源頭，姐係data structure睇會易明D。</li>
<li>但係當D code唔係用黎handle data就唔work，例如一D dev ops 嘅code</li>
</ul>
</li>
<li>睇人地嘅註解<ul>
<li>放到咁後係當有comment 果時己經去到睇 code 嘅level，未了解structure就睇code好易睇錯野。</li>
</ul>
</li>
<li>要focus，唔好心急跳黎睇<ul>
<li>未清楚曬就skip好易中伏，到最後仲用多左時間，</li>
</ul>
</li>
</ol>
<h1 id="Reflections-of-an-“Old”-Programmer"><a href="#Reflections-of-an-“Old”-Programmer" class="headerlink" title="Reflections of an “Old” Programmer"></a><a href="http://www.bennorthrop.com/Essays/2016/reflections-of-an-old-programmer.php" target="_blank" rel="external">Reflections of an “Old” Programmer</a></h1><ul>
<li>Knowledge decay<ul>
<li>隨住科技嘅進步，好多舊嘅技術會慢慢fade out</li>
</ul>
</li>
<li>Knowledge accumulation rate<ul>
<li>學野嘅速度</li>
</ul>
</li>
<li>Three stages<ul>
<li>Eager apprentice<ul>
<li>快速咁去學好多新嘅language, library 同 framework</li>
</ul>
</li>
<li>Rising start<ul>
<li>對現今流行嘅野都有掌握，開始精進</li>
<li>開始面對轉折點<ul>
<li>成為左senior要教新人，review人地D code，少左時間自己學野</li>
<li>D knowledge會開始decay，出現 accumulation rate &lt; decay rate 嘅情況</li>
</ul>
</li>
</ul>
</li>
<li>Steady veteran<ul>
<li>要keep住用空閒時間學新野，唔係就會變返新手</li>
<li>有人會決定轉去做management, sales, testing … etc</li>
</ul>
</li>
</ul>
</li>
<li>Advice<ul>
<li>睇長線D<ul>
<li>㨂D有得接觸新野嘅公司，寧可低pay D<ul>
<li>以防工作用嘅technology 第時decay曬</li>
</ul>
</li>
</ul>
</li>
<li>學decay level 低嘅knowledge<ul>
<li>algorithms, application security, performance optimization, and architecture</li>
<li>唔好不停去追新嘅libraries</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="咖啡館師傅的啟示，如何正確跟他人學東西？"><a href="#咖啡館師傅的啟示，如何正確跟他人學東西？" class="headerlink" title="咖啡館師傅的啟示，如何正確跟他人學東西？"></a><a href="http://www.playpcesor.com/2016/09/lifehack-18.html" target="_blank" rel="external">咖啡館師傅的啟示，如何正確跟他人學東西？</a></h1><p>好多野都係context dependent，要睇情況同時機。所以學野唔係要學人地嘅經驗，唔係要學硬性嘅規則，而係學背後的邏輯、方法。咁先可以因應唔同嘅情況調整。</p>
<h1 id="學徒之路"><a href="#學徒之路" class="headerlink" title="學徒之路"></a><a href="http://www.codemud.net/~thinker/GinGin_CGI.py/show_id_doc/493" target="_blank" rel="external">學徒之路</a></h1><p>同上邊幾篇文都有D共通點</p>
<ul>
<li>基礎的知識、理論<ul>
<li>Decay rate 比較低嘅knowledge</li>
<li>可以透過書本、文件、或別人的教導獲得</li>
</ul>
</li>
<li>經驗和應用類的知識<ul>
<li>Decay rate 高</li>
<li>好似上一篇提及嘅學習方法咁<ul>
<li>不該全盤接受別人的想法，特別是經驗</li>
<li>可以引以為鑑，反省自己的做法和想法</li>
</ul>
</li>
<li>例子<ul>
<li>Design Pattern</li>
<li>Test Driven Development</li>
<li>Agile</li>
</ul>
</li>
</ul>
</li>
<li>次要嘅發展方向的內容<ul>
<li>以理論派嘅方式， 就係以研讀和理解的方式學習</li>
</ul>
</li>
<li>主要嘅發展方向的內容先多花時間以實戰方式進行</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我要成為前端工程師！給-JavaScript-新手的建議與學習資源整理&quot;&gt;&lt;a href=&quot;#我要成為前端工程師！給-JavaScript-新手的建議與學習資源整理&quot; class=&quot;headerlink&quot; title=&quot;我要成為前端工程師！給 JavaScript 新手的建議與學習資源整理&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.inside.com.tw/2016/02/19/javascript-novice-advice-and-learning-resources&quot;&gt;我要成為前端工程師！給 JavaScript 新手的建議與學習資源整理&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;當睇唔明人地D code&lt;ul&gt;
&lt;li&gt;查書&lt;ul&gt;
&lt;li&gt;唔知要查嘅野係邊頁&lt;/li&gt;
&lt;li&gt;要先對成個知識體系有基本了解，先可以有效率咁search&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查Google&lt;ul&gt;
&lt;li&gt;唔知用咩keyword去search&lt;/li&gt;
&lt;li&gt;同查書一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;試+靠估&lt;ul&gt;
&lt;li&gt;可能會得出錯嘅結論，學左D錯嘅野&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;做住學&lt;ul&gt;
&lt;li&gt;要有觀念打底先扎實&lt;ul&gt;
&lt;li&gt;都係要了解左成個知識體系先&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我好同意E一點，要打好底咁先學到野。因為做野果時好多時都有deadline，一定要好有效率咁學，唔係最後係壓力下，只係patch到work就算，可唔到可以reuse嘅knowledge。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會寫的多、看懂的少&lt;ul&gt;
&lt;li&gt;如果你還是用一知半解的觀念去開發，你會花上大把大把的時間在除錯、鬼打牆、生悶氣、捶心肝。&lt;ul&gt;
&lt;li&gt;其實就係leaky abstraction 嘅問題&lt;ul&gt;
&lt;li&gt;當你要maintain D code，就算D third party library 好勁，好可靠，都要花時間去理解佢點運作。&lt;/li&gt;
&lt;li&gt;因為世上係冇完美嘅abstraction，當一遇到底層嘅問題，必需要對library有深入嘅了解先solve到。&lt;/li&gt;
&lt;li&gt;當出左事先抽時間去學，好可能會趕唔切，因為未必可以locate到個問題係邊個abstraction layer出事。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當中推介D書遲D抽時間速睇。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Insight" scheme="http://199911.github.io/categories/Insight/"/>
    
    
  </entry>
  
  <entry>
    <title>&quot;CSS - the missing manual 2nd edition&quot; CSS Advanced CSS</title>
    <link href="http://199911.github.io/review/2016/11/24/CSS-missing-manual-4/"/>
    <id>http://199911.github.io/review/2016/11/24/CSS-missing-manual-4/</id>
    <published>2016-11-23T16:00:00.000Z</published>
    <updated>2016-11-23T16:43:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>This chapter gives some hints on writing maintainable CSS and introduce SCSS.</p>
<a id="more"></a>
<h3 id="Organize-style"><a href="#Organize-style" class="headerlink" title="Organize style"></a>Organize style</h3><ul>
<li>Class name<ul>
<li>Name style by purpose, not appearance</li>
<li>Don’t use name base on position<ul>
<li>.leftSideBar</li>
</ul>
</li>
<li>Avoid cryptic names</li>
</ul>
</li>
<li>Don’t repeat yourself<ul>
<li>I think it depends on context</li>
</ul>
</li>
<li>Use multiple Class<ul>
<li>Using partial in SCSS seems a better choice</li>
</ul>
</li>
<li>Group related style<ul>
<li>apply to related parts of a page</li>
<li>with a related purpose</li>
</ul>
</li>
<li>Separate groups by comment or put it in different style sheet<ul>
<li><code>@import</code> will delay the rendering, use css pre processor instead</li>
</ul>
</li>
</ul>
<h3 id="Reset-CSS-vs-Normalize-CSS"><a href="#Reset-CSS-vs-Normalize-CSS" class="headerlink" title="Reset CSS vs Normalize CSS"></a>Reset CSS vs Normalize CSS</h3><p>Reset style means remove all browser CSS, normalize means unify the styles. For example, reset CSS will make headlines and paragraph the same size.</p>
<p>Reset style:</p>
<ul>
<li>Remove padding and margins</li>
<li>Apply consistent font sizes</li>
<li>Set a consistent line height</li>
<li>Improve table border and create consistent table cells</li>
<li>Remove borders from linked images</li>
<li>Set consistent list indents and bullet types</li>
<li>Remove quote marks from quoted material</li>
</ul>
<h3 id="Using-Descendant-Selectors"><a href="#Using-Descendant-Selectors" class="headerlink" title="Using Descendant Selectors"></a>Using Descendant Selectors</h3><ul>
<li>Limit the scope of CSS by descendant selectors and <code>&lt;div&gt;</code>.</li>
<li>Add class to body to identify page type and layout<ul>
<li>Just like a “namespace”</li>
</ul>
</li>
</ul>
<h2 id="OOCSS-vs-SMACSS"><a href="#OOCSS-vs-SMACSS" class="headerlink" title="OOCSS vs SMACSS"></a>OOCSS vs SMACSS</h2><p>Other approaches on organizing CSS</p>
<ul>
<li>http:// coding.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/</li>
<li><a href="http://smacss.com" target="_blank" rel="external">http://smacss.com</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This chapter gives some hints on writing maintainable CSS and introduce SCSS.&lt;/p&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>&quot;CSS - the missing manual 2nd edition&quot; CSS Page Layout</title>
    <link href="http://199911.github.io/review/2016/11/20/CSS-missing-manual-3/"/>
    <id>http://199911.github.io/review/2016/11/20/CSS-missing-manual-3/</id>
    <published>2016-11-19T16:00:00.000Z</published>
    <updated>2016-11-20T06:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>This chapter have enough images to help reader understand the layout. I highly recommend to learn layout by reading this chapter</p>
<h3 id="Layout-type"><a href="#Layout-type" class="headerlink" title="Layout type"></a>Layout type</h3><ul>
<li>Fixed width<ul>
<li>The <code>width</code> value is a fixed numerical value</li>
</ul>
</li>
<li>Fluid<ul>
<li>The <code>width</code> is a percentage value</li>
</ul>
</li>
<li>Responsive Web design (RWD)<ul>
<li>The layout change with the screen size</li>
<li>The layout for different screen can be “Fixed Width” and “Fluid”</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="Common-technique-for-css-layout"><a href="#Common-technique-for-css-layout" class="headerlink" title="Common technique for css layout"></a>Common technique for css layout</h3><ul>
<li>float (for different section)</li>
<li>absolute positioning</li>
</ul>
<h3 id="Why-mobile-first"><a href="#Why-mobile-first" class="headerlink" title="Why mobile first?"></a>Why mobile first?</h3><p>Limited screen size help us eliminate noise and focus on content</p>
<h3 id="Workflow-on-design"><a href="#Workflow-on-design" class="headerlink" title="Workflow on design"></a>Workflow on design</h3><p>In short, design from the highest abstraction layer to the lowest.</p>
<ol>
<li>Identify the layout first<ul>
<li>don’t spend too much time on graphic and detail</li>
</ul>
</li>
<li>Identify different sections (boxes)<ul>
<li>Notice that the HTML element will take up all width by default. The size of column should be determined in step 1.</li>
</ul>
</li>
<li>Remember the background image</li>
<li>Think about the implementation of layout</li>
<li>Design the style of different element</li>
<li>Determine the size of margins and padding</li>
</ol>
<h3 id="To-fix-items-inside-float-container-break-outside"><a href="#To-fix-items-inside-float-container-break-outside" class="headerlink" title="To fix items inside float container break outside"></a>To fix items inside float container break outside</h3><p>Four solutions:</p>
<ul>
<li>Add <code>clear: both;</code> element at the bottom inside the floating container</li>
<li>Float the Item</li>
<li>Add <code>overflow: hidden;</code><ul>
<li>Notice that if element is absolute positioned, it will not show up. (It is hidden)</li>
</ul>
</li>
<li>Use micro clear fix<ul>
<li>Add <code>clear: both;</code> in pseudo element <code>::after</code></li>
<li>Also <code>display: table;</code></li>
<li>Bootstrap 3 use this technique</li>
</ul>
</li>
</ul>
<h3 id="Using-table-to-layout"><a href="#Using-table-to-layout" class="headerlink" title="Using table to layout"></a>Using table to layout</h3><p>We can use multicolumn in CSS 3 instead</p>
<ul>
<li>Pros<ul>
<li>When you need to create columns with same height</li>
</ul>
</li>
<li>Cons<ul>
<li>Need to add html code</li>
<li>difficult to change</li>
<li>not work well in cellphone</li>
</ul>
</li>
</ul>
<h3 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h3><ul>
<li>height depends on content<ul>
<li>difficult to create full height column<ul>
<li>Use a wrapper to wrap the main content (should be long enough) with the columns</li>
<li>and then add background img with the same width and repeat vertically as the column in wrapper</li>
<li>the column have back ground , but actually it is background of the wrapper</li>
</ul>
</li>
</ul>
</li>
<li>Float does not work with <code>position:fixed</code> or <code>position:absolute</code></li>
</ul>
<h3 id="Positioning-properties-left-right-top-and-bottom"><a href="#Positioning-properties-left-right-top-and-bottom" class="headerlink" title="Positioning properties (left, right, top and bottom)"></a>Positioning properties (left, right, top and bottom)</h3><ul>
<li>Let browser calculate the size of element<ul>
<li>Specify both left and right / top and bottom</li>
<li>I cannot come up with use case<ul>
<li>may be using <code>vh</code> and <code>vw</code> already serve most of our needs</li>
<li><code>calc()</code> give us more flexibility</li>
</ul>
</li>
</ul>
</li>
<li>Percentage values will not change the element’s size</li>
</ul>
<h3 id="Media-query"><a href="#Media-query" class="headerlink" title="Media query"></a>Media query</h3><p>Common usage:</p>
<ul>
<li>adjust column</li>
<li>flexible width</li>
<li>tighten up white space</li>
<li>adjust font sizes</li>
<li>change navigation menus<ul>
<li>convert nav bar to dropdown in mobile device</li>
</ul>
</li>
<li>hide content on handhold device</li>
<li>use background image</li>
</ul>
<h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul>
<li><code>flex-direction</code><ul>
<li>usually use ‘row’ in desktop and switch to ‘column’ in mobile</li>
</ul>
</li>
<li><code>justify-content</code><ul>
<li>if flex widths is used, justify-content have no effect</li>
</ul>
</li>
<li><code>align-items</code><ul>
<li>default value: <code>stretch</code></li>
<li>align baseline<ul>
<li>align the first line of text</li>
</ul>
</li>
</ul>
</li>
<li><code>align-content only works when</code><ul>
<li>flex-wrap is wrap</li>
<li>flex container must taller than the rows of flex items</li>
<li>default value: <code>stretch</code></li>
</ul>
</li>
<li><code>order</code><ul>
<li>Solve the CSS negative margin to change the order (they want to put main content in HTML first for SEO)</li>
</ul>
</li>
<li><code>flex</code><ul>
<li>default values:<ul>
<li>0 1 auto</li>
<li><ul>
<li>1 0% (if the first value is defined)</li>
</ul>
</li>
<li>what if * = 0?</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Special-note"><a href="#Special-note" class="headerlink" title="Special note"></a>Special note</h3><ul>
<li>flex containers and items are not block level element<ul>
<li>Some properties don’t apply to them</li>
</ul>
</li>
<li>flex items’ margins don’t collapse<ul>
<li>can auto take up all space -&gt; push left / right</li>
</ul>
</li>
<li>no-wrap + shrink 0 will make the item overflow<br>wrap will make the item drop (if sum of flex-basic &gt; container width)</li>
</ul>
<h3 id="Size-calculation"><a href="#Size-calculation" class="headerlink" title="Size calculation"></a>Size calculation</h3><ul>
<li>space difference = absolute( container size - sum of flex-basic of all items )</li>
<li>when flex container &gt; sum of minimum size of items<ul>
<li>item’s size = (flex-basic) + (flex-grow/sum of flex-grow) * (space difference)</li>
</ul>
</li>
<li>when flex container &lt; sum of minimum size of items<ul>
<li>item’s size = (flex-basic) - (flex-grow/sum of flex-shrink) * (space difference)</li>
</ul>
</li>
</ul>
<h3 id="flex-basic-auto-and-flex-basic-content"><a href="#flex-basic-auto-and-flex-basic-content" class="headerlink" title="flex-basic: auto; and flex-basic: content;"></a><code>flex-basic: auto;</code> and <code>flex-basic: content;</code></h3><p>According to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis" target="_blank" rel="external">MDN</a>, <code>auto</code> can means “look at my width or height property” and “automatic sizing”.<br>At the end:</p>
<ul>
<li><code>auto</code> means “look at my width or height property”;</li>
<li><code>content</code> keyword is introduced to trigger automatic sizing;</li>
</ul>
<h3 id="Jargons"><a href="#Jargons" class="headerlink" title="Jargons"></a>Jargons</h3><ul>
<li>Float drops<ul>
<li>When there are not enough space, the column will drops down below the other</li>
<li>Solution: Use box-sizing to define the column size precisely</li>
</ul>
</li>
<li>Frameset<ul>
<li>fixed component in certain place</li>
<li>keep important fixtures handy</li>
<li>can implement with html frame</li>
</ul>
</li>
<li>Breakpoint<ul>
<li>are the screen size value which trigger style change</li>
</ul>
</li>
<li>Flexible grid<ul>
<li>Bootstrap 3’s grid system is an example</li>
</ul>
</li>
</ul>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><ul>
<li>Don’t add unnecessary div</li>
<li>CSS built in grid layout<ul>
<li>But it is not ready</li>
</ul>
</li>
<li>There are lots of layout already, don’t need to start from zero</li>
<li>Search engine limited the amount of html crawl, it rank the content near the beginning higher score.<ul>
<li>I am not sure is it valid now</li>
</ul>
</li>
<li>Background image cannot be outside the element</li>
<li>CSS layout difficulty<ul>
<li>Cannot fix the position and sizes, because user can change the screen size</li>
</ul>
</li>
<li>Can use <code>media</code> attribute in link tag to determine which style sheet to download</li>
<li>Drawback of fluid image: force user to download a bigger image</li>
<li>Don’t add unit when the value is 0</li>
</ul>
<h3 id="To-read-list"><a href="#To-read-list" class="headerlink" title="To read list"></a>To read list</h3><ul>
<li>flexbox usage<ul>
<li><a href="https://philipwalton.github.io/solved-by-flexbox/" target="_blank" rel="external">https://philipwalton.github.io/solved-by-flexbox/</a></li>
</ul>
</li>
<li>mobile first<ul>
<li><a href="http://www.abookapart.com/products/mobile-first" target="_blank" rel="external">http://www.abookapart.com/products/mobile-first</a></li>
<li><a href="https://www.sitepoint.com/making-case-mobile-first-designs/" target="_blank" rel="external">https://www.sitepoint.com/making-case-mobile-first-designs/</a></li>
</ul>
</li>
<li>For a good explanation of why floated elements can break outside of their containing blocks<ul>
<li>www.complexspiral.com/publications/containing-floats.</li>
</ul>
</li>
<li>Create full height column (sidebar) with float<ul>
<li>some other technique: <a href="http://css-tricks.com/fluid-width-equal-height-columns/" target="_blank" rel="external">http://css-tricks.com/fluid-width-equal-height-columns/</a></li>
<li><a href="http://webdesign.tutsplus.com/tutorials/quick-tip-solving-the-equal-height-column-conundrum--cms-20403" target="_blank" rel="external">http://webdesign.tutsplus.com/tutorials/quick-tip-solving-the-equal-height-column-conundrum--cms-20403</a></li>
</ul>
</li>
<li>Responsive image technique<ul>
<li><a href="http://alistapart.com/article/responsive-images-in-practice" target="_blank" rel="external">http://alistapart.com/article/responsive-images-in-practice</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This chapter have enough images to help reader understand the layout. I highly recommend to learn layout by reading this chapter&lt;/p&gt;
&lt;h3 id=&quot;Layout-type&quot;&gt;&lt;a href=&quot;#Layout-type&quot; class=&quot;headerlink&quot; title=&quot;Layout type&quot;&gt;&lt;/a&gt;Layout type&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fixed width&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;width&lt;/code&gt; value is a fixed numerical value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fluid&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;width&lt;/code&gt; is a percentage value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Responsive Web design (RWD)&lt;ul&gt;
&lt;li&gt;The layout change with the screen size&lt;/li&gt;
&lt;li&gt;The layout for different screen can be “Fixed Width” and “Fluid”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>&quot;CSS - the missing manual 2nd edition&quot; Applied CSS</title>
    <link href="http://199911.github.io/review/2016/11/19/CSS-missing-manual-2/"/>
    <id>http://199911.github.io/review/2016/11/19/CSS-missing-manual-2/</id>
    <published>2016-11-18T16:00:00.000Z</published>
    <updated>2016-11-19T14:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Applied-CSS"><a href="#Applied-CSS" class="headerlink" title="Applied CSS"></a>Applied CSS</h2><p>I almost know all style introduced in this chapter. I only jot down the information worth mentioning and some knowledge I don’t know.</p>
<a id="more"></a>
<h3 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h3><ul>
<li>Font license<ul>
<li>Some font companies ban other to use their fonts on web to prevent their creation is pirated.</li>
<li>Some companies offer license for web usage.</li>
</ul>
</li>
<li>Data format of icon font<ul>
<li>There are graphical icon or SVG icon.</li>
<li>These data format take more space to store, so the file size is bigger than web font.</li>
</ul>
</li>
<li>For fonts which are tailor made for italic and bold, we need to override font style in <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code>.</li>
<li>Absolute font size keyword<ul>
<li>For <code>font-size</code> property, we usually use number value, like <code>16px</code>, <code>2em</code>, <code>2</code> etc. Actually there are absolute size keywords, like <code>xx-small</code>, <code>medium</code>, <code>larger</code> etc.</li>
<li>These keywords are handled in different ways by browser vendors, it is seldom be used.</li>
</ul>
</li>
</ul>
<h3 id="Don’t-add-unit-to-Line-height"><a href="#Don’t-add-unit-to-Line-height" class="headerlink" title="Don’t add unit to Line height"></a>Don’t add unit to Line height</h3><p>Don’t put unit in <code>line-height</code>. Use numeric value only to make sure line height is calculated base on the current font size. This can prevent the bugs cause by CSS inheritance.</p>
<h3 id="Use-negative-margin-to-remove-space"><a href="#Use-negative-margin-to-remove-space" class="headerlink" title="Use negative margin to remove space"></a>Use negative margin to remove space</h3><p>It is a common technique.</p>
<h3 id="List-style"><a href="#List-style" class="headerlink" title="List style"></a>List style</h3><p>There are many option in <code>list-style-type</code>. We can also customize the style. <a href="http://blog.teamtreehouse.com/customize-ordered-lists-pseudo-element" target="_blank" rel="external">REF</a></p>
<h3 id="Collapsing-margins"><a href="#Collapsing-margins" class="headerlink" title="Collapsing margins"></a>Collapsing margins</h3><p>Margins will not stack, the maximum margin will be took. Use padding if you want to stack.<br>PS: If one margin is positive and one is negative, there is no collapsing margin</p>
<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><ul>
<li>Avoid setting height of elements<ul>
<li>The content may overflow in some screen size</li>
</ul>
</li>
<li>Float make the element outside the normal layout flow<ul>
<li>Some element will be shown under the float element<ul>
<li>Such as background</li>
</ul>
</li>
<li>We can use overflow hidden to fix it</li>
</ul>
</li>
<li>Background image bottom bug<ul>
<li>When the screen is very big, the bottom is not the bottom of browser window.<ul>
<li>Using height 100% can make the page size at least as large as browser window</li>
</ul>
</li>
</ul>
</li>
<li>Background percentage<ul>
<li>A percentage value aligns the specified percentage of the image with the same percentage of the styled element.<ul>
<li>In another words, both origin of background image and position of the origin is affected by percentage value</li>
</ul>
</li>
</ul>
</li>
<li>Some browsers ignore background image when printing the web page</li>
<li>To implement background with color overlay, we can use background image blend.</li>
<li>To protect users’ privacy, limited style can be applied to the :visited pseudo-class<ul>
<li><code>color</code>, <code>background-color</code> and <code>border-color</code> is available</li>
</ul>
</li>
<li>Double border problem in list items<ul>
<li>All elements have top border, use <code>:last-child</code> or <code>:last-of-type</code> to add bottom border.</li>
<li>In bootstrap 3, it use -1px technique</li>
<li>In <code>&lt;table&gt;</code>, we can use <code>border-collapse</code> directly</li>
</ul>
</li>
<li>Don’t use <code>&lt;table&gt;</code> for layout</li>
</ul>
<h3 id="Jargon"><a href="#Jargon" class="headerlink" title="Jargon"></a>Jargon</h3><ul>
<li>Gutter<ul>
<li>It means white space between elements</li>
</ul>
</li>
<li>Source order<ul>
<li>The order in which you write your HTML</li>
</ul>
</li>
<li>Absolute path<ul>
<li><a href="http://199911.github.io/review/2016/11/12/CSS-missing-manual-1/">http://199911.github.io/</a></li>
</ul>
</li>
<li>Root-related path<ul>
<li><a href="/review/2016/11/12/CSS-missing-manual-1/">/review/2016/11/12/CSS-missing-manual-1/</a></li>
</ul>
</li>
<li>Document-related path<ul>
<li><a href="../CSS-missing-manual-1/">../CSS-missing-manual-1/</a></li>
</ul>
</li>
<li>CSS Sprites<ul>
<li>Merge all small image into a big one, use background position to show the particular image.<ul>
<li>It also is a preload technique, download all small image in batch.<ul>
<li>Avoid delay on user action and image download.<ul>
<li>Useful in imaged buttons.</li>
</ul>
</li>
</ul>
</li>
<li>Can make rollover event easier (by changing <code>background-position</code>).</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Transformation-Transition-and-Animation"><a href="#Transformation-Transition-and-Animation" class="headerlink" title="Transformation, Transition and Animation"></a>Transformation, Transition and Animation</h3><ul>
<li>scale can have negative value<ul>
<li>the element will be flipped</li>
</ul>
</li>
<li><a href="https://matthewlein.com/ceaser/" target="_blank" rel="external">animation timing function tools</a><ul>
<li>When class with transition is removed, there are no transition during the removal</li>
<li>Usually put transition style in the starting class instead of final class</li>
</ul>
</li>
<li>Transition delay can is useful in CSS dropdown<ul>
<li>Prevent the menu disappear quickly by delaying the style of transition class removal</li>
</ul>
</li>
<li>Transition on opacity, translate, scale and rotate is smoother than other as they take less CPU</li>
<li>Force the browser to use GPU: <code>transform: translateZ(0)</code></li>
<li>Animation<ul>
<li>write css rule for key framework, and then use the CSS animation rule to animate</li>
<li>can pause animation by <code>animation-play-state</code></li>
</ul>
</li>
</ul>
<h3 id="Other-information"><a href="#Other-information" class="headerlink" title="Other information"></a>Other information</h3><ul>
<li>Percentage does not work on drop shadows</li>
<li>Document-related path in CSS provide directions in relation to the style sheet file, not the HTML page URL</li>
<li>Less color can be shown in GIF<ul>
<li>Use GIF for icon</li>
</ul>
</li>
<li>Web surfer already familiar with form<ul>
<li>Don’t change the style of form too much otherwise they may be confused.</li>
</ul>
</li>
<li>There are some “@ rules”, like <code>@media</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Applied-CSS&quot;&gt;&lt;a href=&quot;#Applied-CSS&quot; class=&quot;headerlink&quot; title=&quot;Applied CSS&quot;&gt;&lt;/a&gt;Applied CSS&lt;/h2&gt;&lt;p&gt;I almost know all style introduced in this chapter. I only jot down the information worth mentioning and some knowledge I don’t know.&lt;/p&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>&quot;CSS - the missing manual 2nd edition&quot; Basic CSS</title>
    <link href="http://199911.github.io/review/2016/11/12/CSS-missing-manual-1/"/>
    <id>http://199911.github.io/review/2016/11/12/CSS-missing-manual-1/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2016-11-12T03:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>This book is very good for learning CSS. It has 4 sections, start from the basic knowledge to advanced technique. It also provide some exercises for user to get some hand on experience.</p>
<p>But this only have few picture and lots of text, it is quite boring to read.</p>
<ol>
<li>Basic CSS</li>
<li>Applied CSS</li>
<li>Page Layout CSS</li>
<li>Advanced CSS</li>
</ol>
<a id="more"></a>
<h2 id="Basic-CSS"><a href="#Basic-CSS" class="headerlink" title="Basic CSS"></a>Basic CSS</h2><h3 id="Know-what-browser-to-support"><a href="#Know-what-browser-to-support" class="headerlink" title="Know what browser to support"></a>Know what browser to support</h3><p>Browsers are also software product. They have bugs and feature not support. We may need to have work around on browser quirk. Market share of browser can help us to determine which browser and what version to support.:</p>
<ul>
<li><a href="http://www.netmarketshare.com/browser-market-share.aspx" target="_blank" rel="external">http://www.netmarketshare.com/browser-market-share.aspx</a></li>
<li><a href="http://gs.statcounter.com" target="_blank" rel="external">http://gs.statcounter.com</a></li>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/ie6countdown/" target="_blank" rel="external">https://developer.microsoft.com/en-us/microsoft-edge/ie6countdown/</a></li>
</ul>
<h3 id="Some-tips-on-HTML"><a href="#Some-tips-on-HTML" class="headerlink" title="Some tips on HTML"></a>Some tips on HTML</h3><p>We can solve problem in many ways. But using some well known technique help other understand your code and help us avoid bugs. Here are some tips:</p>
<ul>
<li>Stop using <code>&lt;font&gt;</code>.</li>
<li>Don’t use <code>&lt;table&gt;</code> for layout.</li>
<li>Don’t use <code>&lt;br&gt;</code> for spacing, use margin or padding.</li>
<li>Don’t overuse <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code></li>
<li>Don’t forget Doctype!<ul>
<li>No doctype will fallback to old browser mode, which may make the page render in a strange way.</li>
</ul>
</li>
</ul>
<h3 id="Some-mistakes-in-the-book"><a href="#Some-mistakes-in-the-book" class="headerlink" title="Some mistakes in the book"></a>Some mistakes in the book</h3><p>The book mention that there will be no CSS4, because CSS3 will only updating CSS3 modules. Actually w3c is release CSS4 on 2011</p>
<h3 id="Jargon-of-CSS"><a href="#Jargon-of-CSS" class="headerlink" title="Jargon of CSS"></a>Jargon of CSS</h3><p>A CSS rule have:</p>
<ul>
<li>selector<ul>
<li>type (element) selector</li>
<li>class selector</li>
<li>id selector</li>
</ul>
</li>
<li>declaration block<ul>
<li>declaration<ul>
<li>property</li>
<li>value</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="CSS-Inheritance"><a href="#CSS-Inheritance" class="headerlink" title="CSS Inheritance"></a>CSS Inheritance</h3><ul>
<li>Positioning style is not Inherit</li>
<li>Browser built in style may override the Inheritance</li>
</ul>
<h3 id="External-CSS-vs-Internal-CSS"><a href="#External-CSS-vs-Internal-CSS" class="headerlink" title="External CSS vs Internal CSS"></a>External CSS vs Internal CSS</h3><p>External CSS will be cached by browsers, need use force reload to view the changes ( cmd/ctrl + shift + R ). It is quite inconvenient during development. The cache may mislead us to think our CSS is wrong. One way to avoid it is to develop with internal CSS, move it to external later</p>
<p>Some developer use external script for general style and internal script for page customization. Make sure internal script is load after the external one if you do this.</p>
<h3 id="Avoid-ID-selector"><a href="#Avoid-ID-selector" class="headerlink" title="Avoid ID selector"></a>Avoid ID selector</h3><p>ID selectors have the highest specificity, stop using it in CSS to avoid specificity wars.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This book is very good for learning CSS. It has 4 sections, start from the basic knowledge to advanced technique. It also provide some exercises for user to get some hand on experience.&lt;/p&gt;
&lt;p&gt;But this only have few picture and lots of text, it is quite boring to read.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Basic CSS&lt;/li&gt;
&lt;li&gt;Applied CSS&lt;/li&gt;
&lt;li&gt;Page Layout CSS&lt;/li&gt;
&lt;li&gt;Advanced CSS&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>How to pick a framework?</title>
    <link href="http://199911.github.io/diary/2016/11/02/how-to-picking-a-library/"/>
    <id>http://199911.github.io/diary/2016/11/02/how-to-picking-a-library/</id>
    <published>2016-11-01T16:00:00.000Z</published>
    <updated>2016-11-02T15:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>I am working on building an auto-scaling docker cluster for our testing environment. I have no idea on the machine cluster, auto-scaling api and deployment framework, but I have to make decision on which framework to use and build the system. It is a challenge for me. There are lots of failure and lots of learning.</p>
<a id="more"></a>
<h2 id="Failure-one-Know-the-feature-but-does-not-understand-how-they-solve-the-problem"><a href="#Failure-one-Know-the-feature-but-does-not-understand-how-they-solve-the-problem" class="headerlink" title="Failure one: Know the feature, but does not understand how they solve the problem."></a>Failure one: Know the feature, but does not understand how they solve the problem.</h2><p>Schedule is tight, I don’t have time to learn everything from zero. I start from reading article comparing ECS, kubernetes and mesos, after skiming through the introduction in their official pages. But start fast does not mean good progress, I cannot make decision after reading several articles, because I don’t know which feature is important and which is matter to me.</p>
<p>At that time, I want to get hands on experience so I can understand the framework in a better way. These will take more time on learning unrelated stuff, such as setting up and configuring the framework. In the worst case, we may found the framework we spent lots of time on it does not suit our need!</p>
<p>It will be great if we understand how the framework works without trying it. It seems impossible. But if we can focus on testing the feature we need, we already save lots of effort. To do this, we must have a good understanding on the problems framework going to use. We don’t need to understand every details, but at least having an overview of the problems.</p>
<p>A good framework solve a problem in an easy way. To pick a framework, we must understand the problems and how the framework solve them.</p>
<h2 id="Failure-two-Without-refine-the-requirement"><a href="#Failure-two-Without-refine-the-requirement" class="headerlink" title="Failure two: Without refine the requirement"></a>Failure two: Without refine the requirement</h2><p>There is no silver bullet. There does not exist a single framework good at solving all kinds of problems. Every framework have their feature and design. It is really difficult to compare them, as the pros and cons are difficult to quantize the pros and cons of the features.</p>
<p>To find out the best framework which match our need, we need a marking scheme. The marking scheme can be a list of requirement.</p>
<p>Listing requirements is a really simple step, we always think we have know what we need, we understand the problem we have to solve. Write down the requirement is often skipped as it is too simple. But in most case, it is not as simple as you think.</p>
<p>No matter how simple the problem is, never skip the step writing down the requirement. Read every single words in your requirement. Think carefully to clarify every ambiguous word in the requirement. Evil is in the detail, every ambiguity mislead you to the wrong decision.</p>
<h2 id="Failure-three-Dig-too-deep-into-the-API-which-most-of-them-are-not-useful"><a href="#Failure-three-Dig-too-deep-into-the-API-which-most-of-them-are-not-useful" class="headerlink" title="Failure three: Dig too deep into the API ( which most of them are not useful )"></a>Failure three: Dig too deep into the API ( which most of them are not useful )</h2><p>Understanding what feature does a it provided is an important step when picking a framework, but reading the API documentation is not a good way to do it.</p>
<p>I read the ECS API documentation and understand how to use the service. But at the end, I still miss some APIs I need. Even I read the APIs, I still don’t know how to use it, because I cannot remember every details important to me. The time spent on reading the API documentation is kind of wasted, because I have to read it again after I understand every detail of the problem I am going to solve.</p>
<h2 id="Workflow-on-choosing-a-suitable-framework"><a href="#Workflow-on-choosing-a-suitable-framework" class="headerlink" title="Workflow on choosing a suitable framework"></a>Workflow on choosing a suitable framework</h2><h3 id="Step-1-Understand-the-problem"><a href="#Step-1-Understand-the-problem" class="headerlink" title="Step 1. Understand the problem"></a>Step 1. Understand the problem</h3><p>This is the most important step, we have to make sure we understanding the problem completely. Any ambiguous will lead us to make a wrong decision later. When we discover the mistake during implementation, the effort to fix it is doubled or even more.</p>
<p>To understand a new problem, I suggest</p>
<ul>
<li>Learn the related knowledge about this kind of problem</li>
<li>Search how others break it down into smaller problems</li>
<li>Search how others solve the problems<br>These help use to understand the structure of the problems, give us some direction to learn the frameworks.</li>
</ul>
<h3 id="Step-2-List-the-use-cases"><a href="#Step-2-List-the-use-cases" class="headerlink" title="Step 2. List the use cases"></a>Step 2. List the use cases</h3><p>This step is important for us to understand the requirements. Idea in our head is incomplete and inconsistent. Writing down the user stories can reveal the flaw of our idea. You may found the solution in your mind is missing some component to solve the problem. These missing puzzles will be a hint to pick a suitable framework.</p>
<h3 id="Step-3-Draft-the-requirement-from-the-use-cases"><a href="#Step-3-Draft-the-requirement-from-the-use-cases" class="headerlink" title="Step 3. Draft the requirement from the use cases"></a>Step 3. Draft the requirement from the use cases</h3><p>After step 1 and 2, we have a well understanding of the problem. We should not miss any important points now. We can list the requirement from the use case easily. In this step, we should prioritize the requirements.</p>
<p>There may have no framework to help us solve all problems easily, we may need to write some code or having some workaround. The priority help us to identify the importance of different features of framework, which help us a lot on quantizing the value of frameworks.</p>
<h3 id="Step-4-Check-the-documentation-of-framework"><a href="#Step-4-Check-the-documentation-of-framework" class="headerlink" title="Step 4. Check the documentation of framework"></a>Step 4. Check the documentation of framework</h3><p>After we got marking scheme, we can start grading the framework. We can search the documentation and the API by our requirements. If the time is enough, don’t miss the APIs which are not directly related to your requirement. It may inspire us to have a more efficient solution or a simpler way to solve the problem.</p>
<p>Tips: We can google the pros and cons of frameworks in this step, we should now able to understand the technical article and identify the article is related to our problem or not.</p>
<h3 id="Step-5-Go-back-to-step-3-until-you-can-decide-which-framework-to-use"><a href="#Step-5-Go-back-to-step-3-until-you-can-decide-which-framework-to-use" class="headerlink" title="Step 5. Go back to step 3 until you can decide which framework to use"></a>Step 5. Go back to step 3 until you can decide which framework to use</h3><p>If you have any new idea, don’t hesitate to go back to step 3. The requirements may not perfect, we can update it when we find a better way to solve the problems. Repeating the steps of requirement refinement and framework research can give us more confidence on our decision, also lower the chance we missed something during planning.</p>
<h3 id="Step-6-Work-on-the-technical-specification-and-then-implement-the-solution"><a href="#Step-6-Work-on-the-technical-specification-and-then-implement-the-solution" class="headerlink" title="Step 6. Work on the technical specification and then implement the solution"></a>Step 6. Work on the technical specification and then implement the solution</h3><p>After the research, we understand our problems and tools. We know what feature is going to be implement, which API we are going to use. We can predict behavior of the system implemented from user stories. In this stage, there should be no big surprise.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am working on building an auto-scaling docker cluster for our testing environment. I have no idea on the machine cluster, auto-scaling api and deployment framework, but I have to make decision on which framework to use and build the system. It is a challenge for me. There are lots of failure and lots of learning.&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://199911.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>&quot;HTML5 - the missing manual 2nd edition&quot; part 2</title>
    <link href="http://199911.github.io/review/2016/10/21/html5-missing-manual-2/"/>
    <id>http://199911.github.io/review/2016/10/21/html5-missing-manual-2/</id>
    <published>2016-10-20T16:00:00.000Z</published>
    <updated>2016-10-21T14:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Audio-and-Video"><a href="#Audio-and-Video" class="headerlink" title="Audio and Video"></a>Audio and Video</h2><p>Internet become a place for entertainment from sharing academic research. Better supports on video and audio are introduced in HTML5</p>
<ul>
<li>Does not have any copy protect system, any one can download.</li>
<li>Digital rights management is developing in HTML5.1</li>
<li>current positioning of video (currentTime)</li>
<li>play speed (playbackRate)</li>
<li>download progress (seekable)</li>
<li>The book say no HTML5 only solution for web chat<ul>
<li>How about web RTC?</li>
</ul>
</li>
<li>lazy loading<ul>
<li>Use <code>preload</code> attribute, but some old browser does not pay attention on it</li>
</ul>
</li>
<li>media group<ul>
<li>sync different video and audio</li>
</ul>
</li>
<li>video subtitle<ul>
<li>WebVTT,SRT, TTML</li>
</ul>
</li>
<li>There are lots of other stuff to handle, better use video player library instead of building our own.</li>
</ul>
<a id="more"></a>
<h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><ul>
<li>browser does not support rgba will not fallback to rgb automatically</li>
<li>vendor prefix:<ul>
<li>let developer to use new feature and give feedback</li>
<li>tell developer the style rule may change in the future</li>
</ul>
</li>
<li>‘Sliding door’ technique:<ul>
<li>Create a resizable image by breaking it into 3 piece: left, middle and right.</li>
<li>The middle one will repeat.</li>
</ul>
</li>
<li>Transition support:<ul>
<li>transparency</li>
<li>shadow</li>
<li>gradients</li>
<li>transforms<ul>
<li>move</li>
<li>scale</li>
<li>skew</li>
<li>rotate</li>
</ul>
</li>
</ul>
</li>
<li>Column layout<ul>
<li>The layout used in newspaper)</li>
<li>Properties:<ul>
<li>count</li>
<li>width</li>
<li>span</li>
<li>rule</li>
<li>gap</li>
</ul>
</li>
</ul>
</li>
<li>Responsive web design<ul>
<li>Two types<ul>
<li>fluid</li>
<li>fixed</li>
</ul>
</li>
<li>Fluid typography<ul>
<li>Two ways to implement<ul>
<li>percentage</li>
<li><code>em</code> (more popular)<ul>
<li><code>em</code> is a unit from print typography</li>
</ul>
</li>
</ul>
</li>
<li><code>calc()</code> can combine fluid and fixed design</li>
<li>Use <code>em</code> for margin, border and padding to make the layout match the font size</li>
<li>Handle multiple level responsive typography<ul>
<li><code>em</code> inherit size from parent element</li>
<li><code>rem</code> (root em) specific the absolute size</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Viewport"><a href="#Viewport" class="headerlink" title="Viewport"></a>Viewport</h3><ul>
<li>Prevent mobile browsers not to perform their automatic viewport scaling.<ul>
<li>I guess view desktop version will ignore the viewport tag</li>
</ul>
</li>
</ul>
<h3 id="Media-query"><a href="#Media-query" class="headerlink" title="Media query"></a>Media query</h3><ul>
<li>width</li>
<li>height</li>
<li>device-height</li>
<li>orientation</li>
<li>device-aspect-ratio</li>
<li>device-pixel-ratio<ul>
<li>CSS pixel vs screen pixel</li>
</ul>
</li>
<li>color<ul>
<li>Query number of bits of color coding is used by the device</li>
</ul>
</li>
</ul>
<h3 id="Mobile-first-design"><a href="#Mobile-first-design" class="headerlink" title="Mobile first design"></a>Mobile first design</h3><ul>
<li>default mobile, extra for desktop</li>
<li>TODO: read<ul>
<li><a href="https://blog.intercom.com/why-mobile-first-may-already-be-outdated/" target="_blank" rel="external">https://blog.intercom.com/why-mobile-first-may-already-be-outdated/</a></li>
<li><a href="https://codemyviews.com/blog/mobilefirst" target="_blank" rel="external">https://codemyviews.com/blog/mobilefirst</a></li>
</ul>
</li>
<li>hidden content will still be downloaded (also images!)</li>
<li>using media attribute in link tag can replace whole css script</li>
<li><code>media</code> also work for <code>&lt;video&gt;</code> element<ul>
<li>load different resolution in different device</li>
</ul>
</li>
</ul>
<h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><ul>
<li>require js</li>
<li>for graphically advanced applications<ul>
<li>games</li>
<li>mapping tools</li>
<li>dynamic chart</li>
<li>current only support 2d drawing</li>
<li>no semantics or accessibility (check the current)<ul>
<li>seems some new rules added in 2015</li>
</ul>
</li>
<li>can be used to copy image from video</li>
<li>have fill function</li>
</ul>
</li>
</ul>
<h2 id="Webapp"><a href="#Webapp" class="headerlink" title="Webapp"></a>Webapp</h2><h3 id="Web-storage-API"><a href="#Web-storage-API" class="headerlink" title="Web storage API"></a>Web storage API</h3><ul>
<li>may fail if open in loacl file (some browser link storage to domain name)</li>
<li>storageChanged event<ul>
<li>can sync different tabs</li>
</ul>
</li>
</ul>
<h3 id="File-API"><a href="#File-API" class="headerlink" title="File API"></a>File API</h3><ul>
<li>To use the API, need to get file from<ul>
<li>input or</li>
<li>drag and drop</li>
</ul>
</li>
<li>Can read file content</li>
<li>Can read multiple file by adding <code>multiple</code> attribute to input element</li>
<li>Drag and drop need the to readAsDataURL() method, also drag and drop event</li>
</ul>
<h3 id="IndexedDB-web-SQL-database"><a href="#IndexedDB-web-SQL-database" class="headerlink" title="IndexedDB (web SQL database)"></a>IndexedDB (web SQL database)</h3><ul>
<li>for offline applications</li>
<li>enhancing performance</li>
<li>improving local storage</li>
<li>transaction is very important in indexedDB<ul>
<li>because the task will be interrupted easily (user close the page)</li>
<li>can transaction have multiple operations?</li>
</ul>
</li>
</ul>
<h3 id="Running-webapp-offline"><a href="#Running-webapp-offline" class="headerlink" title="Running webapp offline"></a>Running webapp offline</h3><ul>
<li>Use manifest file<ul>
<li>let browser know to download the manifest file by modify the web page</li>
<li>configure the web server to serve manifest files</li>
<li>don’t cache the page with query string</li>
<li>may turn off the caching for manifest files</li>
<li>support &gt;= IE 10</li>
<li>browser may request user’s permission to download the file</li>
<li>update when user visit the page next time</li>
<li>may need to clear browser cache when testing</li>
<li>beware the space limit<ul>
<li>mobile &lt;= 50MB</li>
<li>desktop &lt;= 250MB</li>
</ul>
</li>
<li><code>SETTINGS</code> only work in firefox</li>
<li><code>FALLBACK</code> can be use with javascript to check browser is online or not</li>
</ul>
</li>
<li>Trigger update<ul>
<li>manifest cannot be cached</li>
<li>manifest file need a new date (last-updated timestamp)</li>
<li>New content in manifest<ul>
<li>may have a line of comment to specific the version</li>
</ul>
</li>
<li>Need to specific the file to download when online (cached file default not downloaded)</li>
</ul>
</li>
<li>Traditional cache vs offline application (need more research)<ul>
<li>controlled by cache-control headers and time limit vs controlled by manifest</li>
</ul>
</li>
</ul>
<h3 id="Server-sent-event"><a href="#Server-sent-event" class="headerlink" title="Server sent event"></a>Server sent event</h3><ul>
<li>Server trigger the send data action to client</li>
<li>one way communication</li>
<li>IE does not support</li>
<li>Difficult to handle in server side, need to check the web server framework support it or not</li>
</ul>
<h3 id="web-socket"><a href="#web-socket" class="headerlink" title="web socket"></a>web socket</h3><ul>
<li>Two ways communication</li>
<li>Computer network setting may block web socket<ul>
<li>Proxy server (if any) may drop the socket connection</li>
</ul>
</li>
<li>web socket server need to handle lots of complex stuff</li>
</ul>
<h3 id="Geolocation"><a href="#Geolocation" class="headerlink" title="Geolocation"></a>Geolocation</h3><ul>
<li>It is not part of HTML5</li>
<li>Require user permission</li>
<li>may not accurate</li>
<li>geolocation can help debugging</li>
</ul>
<h3 id="Web-worker"><a href="#Web-worker" class="headerlink" title="Web worker"></a>Web worker</h3><ul>
<li>worker can only run code save in a separated file</li>
<li>communicate with <code>postMessage()</code></li>
<li>can we have multiple workers?</li>
</ul>
<h3 id="History-management"><a href="#History-management" class="headerlink" title="History management"></a>History management</h3><ul>
<li>Sync url when updated the content with ajax</li>
<li>Solve bookmarking the ajax page problem<ul>
<li>The old solution is using hashbang URLs</li>
</ul>
</li>
<li>Why give up hashbang solution<ul>
<li>complex url</li>
<li>inflexibility (cannot use hash)</li>
<li>no SEO</li>
<li>Cool URLs matter</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Audio-and-Video&quot;&gt;&lt;a href=&quot;#Audio-and-Video&quot; class=&quot;headerlink&quot; title=&quot;Audio and Video&quot;&gt;&lt;/a&gt;Audio and Video&lt;/h2&gt;&lt;p&gt;Internet become a place for entertainment from sharing academic research. Better supports on video and audio are introduced in HTML5&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does not have any copy protect system, any one can download.&lt;/li&gt;
&lt;li&gt;Digital rights management is developing in HTML5.1&lt;/li&gt;
&lt;li&gt;current positioning of video (currentTime)&lt;/li&gt;
&lt;li&gt;play speed (playbackRate)&lt;/li&gt;
&lt;li&gt;download progress (seekable)&lt;/li&gt;
&lt;li&gt;The book say no HTML5 only solution for web chat&lt;ul&gt;
&lt;li&gt;How about web RTC?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lazy loading&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;preload&lt;/code&gt; attribute, but some old browser does not pay attention on it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;media group&lt;ul&gt;
&lt;li&gt;sync different video and audio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;video subtitle&lt;ul&gt;
&lt;li&gt;WebVTT,SRT, TTML&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are lots of other stuff to handle, better use video player library instead of building our own.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>&quot;HTML5 - the missing manual 2nd edition&quot; part 1</title>
    <link href="http://199911.github.io/review/2016/10/16/html5-missing-manual-1/"/>
    <id>http://199911.github.io/review/2016/10/16/html5-missing-manual-1/</id>
    <published>2016-10-15T16:00:00.000Z</published>
    <updated>2016-10-21T14:14:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Part 1 focus on some updated basic markup.</p>
<h2 id="Three-principle-of-html5"><a href="#Three-principle-of-html5" class="headerlink" title="Three principle of html5"></a>Three principle of html5</h2><ol>
<li>don’t break the web<ul>
<li>XHTML 2 broke the Web because it demanded an immediate, dramatic shift in the way web pages were written (and it fail)</li>
<li>compatible, support degrade on new element</li>
</ul>
</li>
<li>pave the cowpaths<ul>
<li>embracing a widely supported but poorly designed feature</li>
<li>standardize some common use case</li>
</ul>
</li>
<li><p>be practical</p>
<ul>
<li>Change base on usage and requirement</li>
</ul>
<a id="more"></a>
</li>
</ol>
<h2 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h2><p>It is used to set up quirks mode. The browsers render the page with buggy rule for to make the page behave same as some old buggy browser.</p>
<h2 id="HTML5-loosened-rules"><a href="#HTML5-loosened-rules" class="headerlink" title="HTML5 loosened rules"></a>HTML5 loosened rules</h2><ul>
<li>Case insensitive</li>
<li>Ignore closing slash from a void element (empty element)</li>
<li>Don’t need quotation mark in attributes (must have no special char (which need to be escaped))</li>
<li>Attribute with no value is allowed (checked)<br>Suggestion:</li>
<li>Always include <html>, <body> and <head></head></body></html></li>
</ul>
<h2 id="Three-tools-to-help-writing-HTML"><a href="#Three-tools-to-help-writing-HTML" class="headerlink" title="Three tools to help writing HTML"></a>Three tools to help writing HTML</h2><ul>
<li>can i use</li>
<li>browser usage<ul>
<li><a href="http://gs.statcounter.com" target="_blank" rel="external">http://gs.statcounter.com</a></li>
<li>Using google analystic the track your visitor can give more precise information</li>
</ul>
</li>
<li>feature detection</li>
</ul>
<h2 id="Make-old-browser-support-HTML5"><a href="#Make-old-browser-support-HTML5" class="headerlink" title="Make old browser support HTML5"></a>Make old browser support HTML5</h2><ul>
<li>Add <code>display: block;</code> to HTML5 new tag</li>
<li>Use Google’s html5shim</li>
</ul>
<h2 id="Site-with-the-Semantic-elements"><a href="#Site-with-the-Semantic-elements" class="headerlink" title="Site with the Semantic elements"></a>Site with the Semantic elements</h2><ul>
<li>Header<ul>
<li>It may overlay with the task of <code>&lt;h1&gt;</code>, <code>&lt;header&gt;</code> is useful when there are title have sub-title, author and other meta data.</li>
</ul>
</li>
<li>Sidebar<ul>
<li>Consider sidebar as nav bar, we can put <code>&lt;aside&gt;</code> inside <code>&lt;nav&gt;</code></li>
<li>Sidebar contains different section, we can put <code>&lt;nav&gt;</code> inside <code>&lt;aside&gt;</code>, more suitable to use when the sidebar is complex.</li>
</ul>
</li>
<li><code>&lt;section&gt;</code><ul>
<li>Small blocks of content</li>
<li>Small contained content that can’t really be described as an article, like a customer billing record or a product listing.</li>
<li>Groups of content</li>
<li>A portion of a longer document</li>
</ul>
</li>
<li>Collapsible boxes<ul>
<li>Use <code>&lt;summary&gt;</code> as clickable header and <code>&lt;details&gt;</code></li>
</ul>
</li>
<li>Footer<ul>
<li>common feature<ul>
<li>Fixed positioning</li>
<li>A close button</li>
<li>A partially transparent background</li>
<li>Animation</li>
</ul>
</li>
<li>We can be use a div with id to split the standard footer</li>
<li>If there are multiple section, we can use <code>&lt;aside&gt;</code></li>
</ul>
</li>
<li><code>&lt;main&gt;</code><ul>
<li>New element introduced in HTML5.1</li>
<li>Same level as <code>&lt;header&gt;</code> and <code>&lt;footer&gt;</code></li>
<li>It holds the page’s full main content, it cannot be put inside any other semantic element.</li>
</ul>
</li>
</ul>
<p>Notice the scope of tag, if there is a <footer> inside <aside>, it means it is footer of the aside.</aside></footer></p>
<h2 id="HTML5-outline-System"><a href="#HTML5-outline-System" class="headerlink" title="HTML5 outline System"></a>HTML5 outline System</h2><ul>
<li>Search engine use this to build a better page preview</li>
<li>Can be used as quality assurance tool</li>
<li>Many developer ignore this</li>
<li>In HTML 5, there can be more than one <code>&lt;h1&gt;</code>.</li>
</ul>
<h2 id="Text-level-semantics"><a href="#Text-level-semantics" class="headerlink" title="Text-level semantics"></a>Text-level semantics</h2><p>Besides page-level semantics mentioned before, there are 3 text-level semantics elements</p>
<ul>
<li><code>&lt;time&gt;</code><ul>
<li><code>datetime</code> attribute<ul>
<li>YYYY-MM-DD</li>
<li>HH:MM</li>
</ul>
</li>
<li><code>pubdate</code><ul>
<li>Publish date</li>
</ul>
</li>
</ul>
</li>
<li><code>&lt;output&gt;</code><ul>
<li>Show javascript output</li>
</ul>
</li>
<li><code>&lt;mark&gt;</code><ul>
<li>Represent a section of text that’s highlighted for reference</li>
</ul>
</li>
</ul>
<h2 id="Accessibility"><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h2><ul>
<li>ARIA<ul>
<li>Accessible Rich Internet Application</li>
<li><code>role</code> attribute</li>
</ul>
</li>
<li>REFa</li>
<li>Microformat</li>
<li>microdata</li>
</ul>
<h2 id="Some-interest-new-feature-in-HTML5"><a href="#Some-interest-new-feature-in-HTML5" class="headerlink" title="Some interest new feature in HTML5"></a>Some interest new feature in HTML5</h2><ul>
<li>‘auto-complete’ attribute in form input</li>
<li>‘require’ and ‘optional’ attributes in form input</li>
<li><code>&lt;datalist&gt;</code> element in form</li>
<li><code>&lt;meter&gt;</code> and <code>progress</code> elements</li>
<li>‘content-editable’ and ‘design mode’ attributes</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Part 1 focus on some updated basic markup.&lt;/p&gt;
&lt;h2 id=&quot;Three-principle-of-html5&quot;&gt;&lt;a href=&quot;#Three-principle-of-html5&quot; class=&quot;headerlink&quot; title=&quot;Three principle of html5&quot;&gt;&lt;/a&gt;Three principle of html5&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;don’t break the web&lt;ul&gt;
&lt;li&gt;XHTML 2 broke the Web because it demanded an immediate, dramatic shift in the way web pages were written (and it fail)&lt;/li&gt;
&lt;li&gt;compatible, support degrade on new element&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pave the cowpaths&lt;ul&gt;
&lt;li&gt;embracing a widely supported but poorly designed feature&lt;/li&gt;
&lt;li&gt;standardize some common use case&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;be practical&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change base on usage and requirement&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>After reading HTML and CSS Design?</title>
    <link href="http://199911.github.io/diary/2016/10/07/after-reading-html-and-css-design/"/>
    <id>http://199911.github.io/diary/2016/10/07/after-reading-html-and-css-design/</id>
    <published>2016-10-06T16:00:00.000Z</published>
    <updated>2016-10-08T09:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>After reading ‘HTML and CSS Design’, I have a deeper understanding on HTML and CSS, but I have some new question to ask. I will jot down my question and do research on it.</p>
<ol>
<li>What is the different between <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code>?<ul>
<li><a href="http://stackoverflow.com/questions/271743/whats-the-difference-between-b-and-strong-i-and-em" target="_blank" rel="external">http://stackoverflow.com/questions/271743/whats-the-difference-between-b-and-strong-i-and-em</a></li>
</ul>
</li>
<li>What HTML tag should we use for button?<ul>
<li><code>&lt;button&gt;</code></li>
<li><code>&lt;input type=&quot;button&quot;&gt;</code></li>
<li><code>&lt;a&gt;</code></li>
<li><code>&lt;div&gt;</code></li>
</ul>
</li>
<li>Pseudo Class vs Pseudo Element</li>
<li><code>&lt;s&gt;</code> vs <code>&lt;del&gt;</code></li>
<li><code>&lt;address&gt;</code> tag</li>
<li>DOCTYPE</li>
<li>Mandatory elements</li>
<li>Mandatory attributes</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After reading ‘HTML and CSS Design’, I have a deeper understanding on HTML and CSS, but I have some new question to ask. I will jot down 
    
    </summary>
    
      <category term="Diary" scheme="http://199911.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>文集十</title>
    <link href="http://199911.github.io/insight/2016/10/04/readings-10/"/>
    <id>http://199911.github.io/insight/2016/10/04/readings-10/</id>
    <published>2016-10-03T16:00:00.000Z</published>
    <updated>2016-11-26T07:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="當主管卻不懂交辦，當心「猴子」爬上身"><a href="#當主管卻不懂交辦，當心「猴子」爬上身" class="headerlink" title="當主管卻不懂交辦，當心「猴子」爬上身"></a><a href="http://www.inside.com.tw/2014/09/17/managers-watch-the-monkeys-carefully" target="_blank" rel="external">當主管卻不懂交辦，當心「猴子」爬上身</a></h1><p>文章將團隊成員分為五種不同層次，最低層次係要等人俾指示，最高就係可以獨立行動，間中做例行報告。要令員工可以獨立行動，需要時間累積信任。</p>
<p>文中仲提及一D指派工作嘅技巧:</p>
<ul>
<li>要清楚指出工作內容</li>
<li>可運用數字明確指出目標，促進員工思考</li>
<li>盡力說動部屬願意做不樂意的事<ul>
<li>最好當然係每個人都做樂意做嘅野。但萬一冇人肯做，都要靠員工去補位</li>
</ul>
</li>
<li>用正確既方法去指派工作，文中提出4種<ol>
<li>直接告訴我你要我做什麼</li>
<li>我希望你先考慮我的意見，再決定我要做什麼<ul>
<li>員工可能想用新方法去解決問題</li>
</ul>
</li>
<li>我想自己決定要做什麼<ul>
<li>員工唔需要監督，係開波之前要搞清楚目標同方向</li>
</ul>
</li>
<li>大家共同討論、決定之後，我就很樂意去做</li>
</ol>
</li>
</ul>
<p>仲有三個指派工作嘅大忌</p>
<ol>
<li>指派太多工作</li>
<li>有多過一個人落order<ul>
<li>會唔知做邊個task先，影響團隊信任</li>
</ul>
</li>
<li>把最困難的事，交給最有能力的人<ul>
<li>最重要都係cost and benefit</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h1 id="小問題，大麻煩"><a href="#小問題，大麻煩" class="headerlink" title="小問題，大麻煩"></a><a href="http://teddy-chen-tw.blogspot.hk/2016/09/blog-post_7.html" target="_blank" rel="external">小問題，大麻煩</a></h1><p>做錯一D細嘅決定係短期內冇咩影響，但細嘅錯誤會慢慢累積成大嘅錯誤，最後做成technique debt。</p>
<p>例如之前我落左係<code>&lt;ul&gt;</code>同<code>&lt;ol&gt;</code>嘅CSS落左一個CSS reset, 搞到post content D list冇曬style。最後係post content D CSS 做左個patch。但係就有其他engineer，因為個patch override左D style，搞到個page爛左。一個簡單嘅錯誤係三日內係唔同嘅地方做成2個bug，最後變成大問題。</p>
<p>文中提出用pair programming 同 code review 去盡早fix左D小問題，但最終都係要有資深嘅engineer去identify到個問題。</p>
<h1 id="Choose-design-over-architecture"><a href="#Choose-design-over-architecture" class="headerlink" title="Choose design over architecture"></a><a href="https://18f.gsa.gov/2015/11/17/choose-design-over-architecture/" target="_blank" rel="external">Choose design over architecture</a></h1><ul>
<li>Conventional wisdom often encourages engineers to start with a big architectural overview, but this will introduce technical debt<ul>
<li>The overview make the service complex. The complexity in one service can take down the whole project<ul>
<li>I guess it is because the service is an essential part of the whole system. All features will depends on the complex services</li>
</ul>
</li>
<li>Architectural plans will push the team forward water fall model<ul>
<li>I guess it is because the product can only be deployed after all infrastructure is ready</li>
</ul>
</li>
</ul>
</li>
<li>Focusing on user experience design and software design can help avoid technical debt.<ul>
<li>Start from small user story<ul>
<li>Even a small story can involve a lot of effort for the engineers, as there are no infrastructure can be reuse.</li>
<li>The set of stories will help engineers figure out what infrastructure is needed and the priorities.</li>
</ul>
</li>
<li>After we have the requirements provided by user stories, we can break the features into modules and organize modules into services.<ul>
<li>SOLID principle in OOP can help us design the system</li>
</ul>
</li>
</ul>
</li>
<li>Optimize for change<ul>
<li>Optimized code lead to an increase in defects and reduced velocity.<ul>
<li>Rule of 3, consider to reuse code if it appear three times</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Summary</p>
<ul>
<li>Get the infrastructure’s requirement using product designer’s mindset</li>
<li>Organize the feature and model using architect mindset</li>
</ul>
<h1 id="Read-This-Google-Email-About-Time-Management-Strategy"><a href="#Read-This-Google-Email-About-Time-Management-Strategy" class="headerlink" title="Read This Google Email About Time Management Strategy"></a><a href="https://www.fastcompany.com/3054571/work-smart/the-better-time-management-strategy-this-googler-taught-his-coworkers" target="_blank" rel="external">Read This Google Email About Time Management Strategy</a></h1><p>The animation in video is impressive. It contains a few points:</p>
<ul>
<li>Meeting can have fewer people</li>
<li>Remove unnecessary meeting</li>
<li>Don’t put all meeting on Friday, because the energy level is low</li>
</ul>
<h1 id="知识漩涡"><a href="#知识漩涡" class="headerlink" title="知识漩涡"></a><a href="http://insights.thoughtworkers.org/obsession-og-technology/" target="_blank" rel="external">知识漩涡</a></h1><p>太多新technology，好難追，但好多時都係大同小異。重點係理解可以通用嘅重點。文中提及分為兩種，第一種係零碎嘅資料，第二種係幫助提升理解力。後者往往比前者重要，但係要用好多心力先可以吸收。</p>
<p>知識框架就係一種幫助理解資料嘅知識，而入邊specific 嘅 domain knowledge 就係資料。學野果時應嘅先廣後深，避免鑽得太深，明白整體之後，先揀得著最多嘅野，專心去學。如果只係不停去追新tech，冇深入了解，去到最後只係知左一堆好快outdate嘅資料，而唔係知識。</p>
<p>小結：</p>
<ul>
<li>冇可能學曬所有野</li>
<li>要先了解成個知識體系，避免鑽得太深</li>
<li>揀最有價值嘅野深入研究</li>
<li>對於得意但同自己發展方向冇關嘅野放係低D嘅priority，要識得放棄</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;當主管卻不懂交辦，當心「猴子」爬上身&quot;&gt;&lt;a href=&quot;#當主管卻不懂交辦，當心「猴子」爬上身&quot; class=&quot;headerlink&quot; title=&quot;當主管卻不懂交辦，當心「猴子」爬上身&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.inside.com.tw/2014/09/17/managers-watch-the-monkeys-carefully&quot;&gt;當主管卻不懂交辦，當心「猴子」爬上身&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;文章將團隊成員分為五種不同層次，最低層次係要等人俾指示，最高就係可以獨立行動，間中做例行報告。要令員工可以獨立行動，需要時間累積信任。&lt;/p&gt;
&lt;p&gt;文中仲提及一D指派工作嘅技巧:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要清楚指出工作內容&lt;/li&gt;
&lt;li&gt;可運用數字明確指出目標，促進員工思考&lt;/li&gt;
&lt;li&gt;盡力說動部屬願意做不樂意的事&lt;ul&gt;
&lt;li&gt;最好當然係每個人都做樂意做嘅野。但萬一冇人肯做，都要靠員工去補位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用正確既方法去指派工作，文中提出4種&lt;ol&gt;
&lt;li&gt;直接告訴我你要我做什麼&lt;/li&gt;
&lt;li&gt;我希望你先考慮我的意見，再決定我要做什麼&lt;ul&gt;
&lt;li&gt;員工可能想用新方法去解決問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我想自己決定要做什麼&lt;ul&gt;
&lt;li&gt;員工唔需要監督，係開波之前要搞清楚目標同方向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大家共同討論、決定之後，我就很樂意去做&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仲有三個指派工作嘅大忌&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指派太多工作&lt;/li&gt;
&lt;li&gt;有多過一個人落order&lt;ul&gt;
&lt;li&gt;會唔知做邊個task先，影響團隊信任&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把最困難的事，交給最有能力的人&lt;ul&gt;
&lt;li&gt;最重要都係cost and benefit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Insight" scheme="http://199911.github.io/categories/Insight/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML and CSS part 3</title>
    <link href="http://199911.github.io/review/2016/10/02/html-and-css-3/"/>
    <id>http://199911.github.io/review/2016/10/02/html-and-css-3/</id>
    <published>2016-10-01T16:00:00.000Z</published>
    <updated>2016-10-02T13:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML5-layout"><a href="#HTML5-layout" class="headerlink" title="HTML5 layout"></a>HTML5 layout</h2><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>We can use a div with id as namespace, such as<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;page&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="header-and-footer"><a href="#header-and-footer" class="headerlink" title="header and footer"></a><code>header</code> and <code>footer</code></h3><p>These tag can be used as header or footer of the page, beside these, every section and article can have their own headers and footers.</p>
<h3 id="article"><a href="#article" class="headerlink" title="article"></a><code>article</code></h3><p>It can be used to hold individual article or blog entry, a comment or forum post, or any other independent piece of content.<br>Notice <code>article</code> can be nested inside each other, comments of comments is one of the use case.</p>
<h3 id="aside"><a href="#aside" class="headerlink" title="aside"></a><code>aside</code></h3><p><code>aside</code> tag have 2 usage.</p>
<ul>
<li>If it is inside <code>article</code>, it should contain information that is related to the article.</li>
<li>If it is outside <code>article</code>, it should contain information related to the entire page.</li>
</ul>
<a id="more"></a>
<h3 id="section"><a href="#section" class="headerlink" title="section"></a><code>section</code></h3><p><code>section</code> group related content together, usually with their own heading. It may contains several <code>article</code> inside. <code>section</code> can also be used in <code>article</code> tag, if the article is long and you want to split it into separate sections.</p>
<h3 id="hgroup"><a href="#hgroup" class="headerlink" title="hgroup"></a><code>hgroup</code></h3><p><code>hgroup</code> stand for header group. For example, you can use <code>hgroup</code> to group a title in <code>h2</code> and a subtitle in <code>h3</code> together.</p>
<h3 id="figure"><a href="#figure" class="headerlink" title="figure"></a><code>figure</code></h3><p><code>figure</code> can be used not only in images, the examples of usage include:</p>
<ul>
<li>images</li>
<li>videos</li>
<li>graphs</li>
<li>diagrams</li>
<li>code samples</li>
<li>text that supports the main body of an article</li>
</ul>
<h3 id="a"><a href="#a" class="headerlink" title="a"></a><code>a</code></h3><p>Before HTML5, putting block element inside <code>a</code> tag is considered incorrect. But in HTML5, place <code>a</code> element around a block level element that contains child elements is allowed.</p>
<h3 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h3><p>Older browsers which do not support HTML5 element treat them as inline element. To support HTML5 in old browsers, we need HTML5 shiv (HTML5 shim)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML5-layout&quot;&gt;&lt;a href=&quot;#HTML5-layout&quot; class=&quot;headerlink&quot; title=&quot;HTML5 layout&quot;&gt;&lt;/a&gt;HTML5 layout&lt;/h2&gt;&lt;h3 id=&quot;Namespace&quot;&gt;&lt;a href=&quot;#Namespace&quot; class=&quot;headerlink&quot; title=&quot;Namespace&quot;&gt;&lt;/a&gt;Namespace&lt;/h3&gt;&lt;p&gt;We can use a div with id as namespace, such as&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div id=&amp;quot;page&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;header-and-footer&quot;&gt;&lt;a href=&quot;#header-and-footer&quot; class=&quot;headerlink&quot; title=&quot;header and footer&quot;&gt;&lt;/a&gt;&lt;code&gt;header&lt;/code&gt; and &lt;code&gt;footer&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;These tag can be used as header or footer of the page, beside these, every section and article can have their own headers and footers.&lt;/p&gt;
&lt;h3 id=&quot;article&quot;&gt;&lt;a href=&quot;#article&quot; class=&quot;headerlink&quot; title=&quot;article&quot;&gt;&lt;/a&gt;&lt;code&gt;article&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;It can be used to hold individual article or blog entry, a comment or forum post, or any other independent piece of content.&lt;br&gt;Notice &lt;code&gt;article&lt;/code&gt; can be nested inside each other, comments of comments is one of the use case.&lt;/p&gt;
&lt;h3 id=&quot;aside&quot;&gt;&lt;a href=&quot;#aside&quot; class=&quot;headerlink&quot; title=&quot;aside&quot;&gt;&lt;/a&gt;&lt;code&gt;aside&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;aside&lt;/code&gt; tag have 2 usage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it is inside &lt;code&gt;article&lt;/code&gt;, it should contain information that is related to the article.&lt;/li&gt;
&lt;li&gt;If it is outside &lt;code&gt;article&lt;/code&gt;, it should contain information related to the entire page.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML and CSS part 2</title>
    <link href="http://199911.github.io/review/2016/10/01/html-and-css-2/"/>
    <id>http://199911.github.io/review/2016/10/01/html-and-css-2/</id>
    <published>2016-09-30T16:00:00.000Z</published>
    <updated>2016-10-02T13:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Doctype"><a href="#Doctype" class="headerlink" title="Doctype"></a>Doctype</h2><p>It defines which version of HTML is using, it may affect how the page is rendered.</p>
<h2 id="Browser’s-bug"><a href="#Browser’s-bug" class="headerlink" title="Browser’s bug"></a>Browser’s bug</h2><p>Bug is unavoidable in software, no exception in browsers. The bugs in browser is also called browser quirk. Such as the video bug on ipad, the mp4 video url may be put before other’s video url.</p>
<h2 id="CSS3-color-support"><a href="#CSS3-color-support" class="headerlink" title="CSS3 color support"></a>CSS3 color support</h2><p>CSS3 support opacity, so we can have RGBa. A new color code HSL is supported, also HSLa.</p>
<h2 id="Tips-about-reserved-background"><a href="#Tips-about-reserved-background" class="headerlink" title="Tips about reserved background"></a>Tips about reserved background</h2><p>If text has a light color on a dark background), you can increase the height between lines and the weight of the font to make it easier to read.</p>
<a id="more"></a>
<h2 id="Brightness-vs-lightness"><a href="#Brightness-vs-lightness" class="headerlink" title="Brightness vs lightness"></a>Brightness vs lightness</h2><p>Brightness only adds black, whereas lightness offers both white and black.</p>
<h2 id="serif-sans-serif-monospace-cursive-and-fantasy"><a href="#serif-sans-serif-monospace-cursive-and-fantasy" class="headerlink" title="serif, sans serif, monospace, cursive and fantasy"></a>serif, sans serif, monospace, cursive and fantasy</h2><p>Use serif for long text,it is easier to read. Sans serif is clearer to read, better for small text. Use monospace for code, easier to align.<br>Cursive fonts look like handwriting. Also Fantasy font is for decoration.</p>
<h2 id="italic-vs-oblique"><a href="#italic-vs-oblique" class="headerlink" title="italic vs oblique"></a>italic vs oblique</h2><p>Italic have cursive aspect (a new font), oblique just put font at a angle.</p>
<h2 id="Text-transform"><a href="#Text-transform" class="headerlink" title="Text transform"></a>Text transform</h2><p>There are CSS to transform text to uppercase, lowercase, or make the first character capitalize</p>
<h2 id="line-height"><a href="#line-height" class="headerlink" title="line height"></a>line height</h2><p>When line height is larger than the font size, there is a gap above the text. The gap is named ‘leading’. In other words, line height - font size = leading.</p>
<h2 id="letter-spacing-and-word-spacing"><a href="#letter-spacing-and-word-spacing" class="headerlink" title="letter spacing and word spacing"></a>letter spacing and word spacing</h2><p>There are CSS to control the spacing between letters and words. These are style seems does not work well in Chinese or other language using block characters.</p>
<h2 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical align"></a>vertical align</h2><p><code>vertical</code> align should be the most commonly misunderstood style. It is not intended to allow you to vertically align text in the middle of block level elements (but this works in table cells, such as <code>td</code> and <code>th</code>). It replaces the depreciated <code>align</code> HTML attribute. It is used in inline elements.</p>
<h2 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a>text-indent</h2><p>It is used in a trick to hide the text which is only available for screen reader and SEO. But in Bootstrap 3, there is a better trick with better performance.</p>
<h2 id="Pseudo-elements"><a href="#Pseudo-elements" class="headerlink" title="Pseudo-elements"></a>Pseudo-elements</h2><ul>
<li><code>:first-letter</code> and <code>:first-line</code>: select first letter or line in text.</li>
<li><code>:link</code> and <code>:visited</code>: select not visited and visited <code>&lt;a&gt;</code> link.</li>
<li><code>:active</code>: select element is being activated by a user.<ul>
<li>pressed button</li>
<li>clicked link.</li>
</ul>
</li>
<li><code>:focus</code>: elements that can be interacted with have focus state.<ul>
<li>from input with cursor in it</li>
<li>It is also possible to use tab key to focus</li>
</ul>
</li>
<li>When pseduo classes are used, they should appear in this order:<ol>
<li><code>:link</code></li>
<li><code>:visited</code></li>
<li><code>:hover</code></li>
<li><code>:focus</code></li>
<li><code>:active</code></li>
</ol>
</li>
</ul>
<h2 id="Shadow-in-CSS3"><a href="#Shadow-in-CSS3" class="headerlink" title="Shadow in CSS3"></a>Shadow in CSS3</h2><p><code>box-shadow</code> and <code>text-shadow</code> are new style in CSS3.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Doctype&quot;&gt;&lt;a href=&quot;#Doctype&quot; class=&quot;headerlink&quot; title=&quot;Doctype&quot;&gt;&lt;/a&gt;Doctype&lt;/h2&gt;&lt;p&gt;It defines which version of HTML is using, it may affect how the page is rendered.&lt;/p&gt;
&lt;h2 id=&quot;Browser’s-bug&quot;&gt;&lt;a href=&quot;#Browser’s-bug&quot; class=&quot;headerlink&quot; title=&quot;Browser’s bug&quot;&gt;&lt;/a&gt;Browser’s bug&lt;/h2&gt;&lt;p&gt;Bug is unavoidable in software, no exception in browsers. The bugs in browser is also called browser quirk. Such as the video bug on ipad, the mp4 video url may be put before other’s video url.&lt;/p&gt;
&lt;h2 id=&quot;CSS3-color-support&quot;&gt;&lt;a href=&quot;#CSS3-color-support&quot; class=&quot;headerlink&quot; title=&quot;CSS3 color support&quot;&gt;&lt;/a&gt;CSS3 color support&lt;/h2&gt;&lt;p&gt;CSS3 support opacity, so we can have RGBa. A new color code HSL is supported, also HSLa.&lt;/p&gt;
&lt;h2 id=&quot;Tips-about-reserved-background&quot;&gt;&lt;a href=&quot;#Tips-about-reserved-background&quot; class=&quot;headerlink&quot; title=&quot;Tips about reserved background&quot;&gt;&lt;/a&gt;Tips about reserved background&lt;/h2&gt;&lt;p&gt;If text has a light color on a dark background), you can increase the height between lines and the weight of the font to make it easier to read.&lt;/p&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML and CSS part 1</title>
    <link href="http://199911.github.io/review/2016/09/20/html-and-css-1/"/>
    <id>http://199911.github.io/review/2016/09/20/html-and-css-1/</id>
    <published>2016-09-19T16:00:00.000Z</published>
    <updated>2016-10-02T13:34:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="padding-start-vs-padding-left"><a href="#padding-start-vs-padding-left" class="headerlink" title="padding-start vs padding-left"></a>padding-start vs padding-left</h2><p>I found the default style of <code>ol</code> and <code>ul</code> in Chrome have a interesting property <code>-webkit-padding-start: 40px;</code>. I am wondering how is it different form <code>padding-left: 40px</code>. According to <a href="http://stackoverflow.com/questions/19582969/what-is-the-difference-between-padding-left-and-padding-start" target="_blank" rel="external">this</a>, they are the same for the language written from left to right. If the language is written from right to left, the padding of <code>-webkit-padding-start: 40px;</code> will move to right.</p>
<p>Note that <code>dt</code> is using margin instead of padding, because it does not need to put any bullet point into the component.</p>
<h2 id="Image’s-alt-attribute-vs-title"><a href="#Image’s-alt-attribute-vs-title" class="headerlink" title="Image’s alt attribute vs title"></a>Image’s <code>alt</code> attribute vs <code>title</code></h2><p><code>alt</code> stands for alternative, which should be description of the image, because it will be shown when the image does not load. <code>title</code> provides extra information of the image. For more detail, we can read <a href="https://www.searchenginejournal.com/image-alt-text-vs-image-title-whats-the-difference/" target="_blank" rel="external">this</a></p>
<a id="more"></a>
<h2 id="width-and-height-in-image-tag-vs-in-CSS"><a href="#width-and-height-in-image-tag-vs-in-CSS" class="headerlink" title="width and height in image tag vs in CSS"></a><code>width</code> and <code>height</code> in image tag vs in CSS</h2><p>According to <a href="http://stackoverflow.com/questions/640190/image-width-height-as-an-attribute-or-in-css" target="_blank" rel="external">this</a>, if the image is part of the content, we should use <code>width</code> and <code>height</code> attribute in image tag. The rule of thumb is, HTML defined the contents and CSS define the layout. For example, the background image’s size should be defined by CSS, because it is for layout and decoration.</p>
<h2 id="align-in-image-tag-is-deprecated-in-HTML-5"><a href="#align-in-image-tag-is-deprecated-in-HTML-5" class="headerlink" title="align in image tag is deprecated in HTML 5"></a><code>align</code> in image tag is deprecated in HTML 5</h2><p>Which should be replace by <code>align</code> in CSS.<br>PS: image is <code>display: inline-block;</code> by default.</p>
<h2 id="figure-is-a-component-of-image-with-caption"><a href="#figure-is-a-component-of-image-with-caption" class="headerlink" title="figure is a component of image with caption"></a><code>figure</code> is a component of image with caption</h2><p>The html structure likes:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;figure&gt;</span><br><span class="line">  &lt;img src=&quot;images/otters.jpg&quot; alt=&quot;Photograph of two sea otters floating in water&quot;&gt;</span><br><span class="line">  &lt;br /&gt;</span><br><span class="line">  &lt;figcaption&gt;Sea otters hold hands when they sleep so they don&apos;t drift away from each other.&lt;/figcaption&gt;</span><br><span class="line">&lt;/figure&gt;</span><br></pre></td></tr></table></figure></p>
<p>Notices that figcaption is HTML 5 element, which will be ignored by old browsers.<br>To have better compatibility, we can have<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;figcaption&gt;Sea otters hold hands when they sleep so they don&apos;t drift away from each other.&lt;/figcaption&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="thead-tbody-and-tfoot"><a href="#thead-tbody-and-tfoot" class="headerlink" title="thead, tbody and tfoot"></a><code>thead</code>, <code>tbody</code> and <code>tfoot</code></h2><p>We can use these when the first and last rows content different content. Browser can make table header and footer sticky when the screen cannot fit the screen. It is also useful in print version when the table cannot be shown in one page.</p>
<h2 id="Deprecated-attribute-of-table-and-form-in-HTML-5"><a href="#Deprecated-attribute-of-table-and-form-in-HTML-5" class="headerlink" title="Deprecated attribute of table and form in HTML 5"></a>Deprecated attribute of table and form in HTML 5</h2><p><code>width</code>, <code>border</code> and <code>background</code> are deprecated in HTML 5 table. <code>size</code> in HTML 5 form’s input is deprecated, but notice <code>maxlength</code> is not.<br>Notice that <code>size</code> in select element is not deprecated. It is used to define the number of item shown in multiple select.</p>
<h2 id="Input-type"><a href="#Input-type" class="headerlink" title="Input type"></a>Input type</h2><p>There is a list of input type in form</p>
<ul>
<li>text</li>
<li>password</li>
<li>radio</li>
<li>checkbox</li>
<li>file</li>
<li>submit<ul>
<li>The <code>name</code> attribute is not necessary, the text on button is defined by the <code>value</code> attribute.</li>
</ul>
</li>
<li>image</li>
<li>hidden<br>The following is new type introduced in the HTML 5</li>
<li>date</li>
<li>email</li>
<li>url</li>
<li>search</li>
</ul>
<h2 id="Label-in-form"><a href="#Label-in-form" class="headerlink" title="Label in form"></a>Label in form</h2><p>The label is used to connect text description with the form input. There are two cases:</p>
<ul>
<li>Wrap the <code>input</code> tag and text description in <code>label</code>.</li>
<li><code>input</code> tag and the description are separated. The value of <code>for</code> attribute in <code>label</code> is same as <code>id</code> of the corresponding <code>input</code>.</li>
</ul>
<p>The book also recommend where to put the text description:<br>Above or to the left of <code>input</code>:</p>
<ul>
<li>Text inputs</li>
<li>Text areas</li>
<li>Select boxes</li>
<li>File uploads<br>To the right of <code>input</code>:</li>
<li>Individual checkboxes</li>
<li>Individual radio buttons</li>
</ul>
<h2 id="fieldset-and-legend"><a href="#fieldset-and-legend" class="headerlink" title="fieldset and legend"></a><code>fieldset</code> and <code>legend</code></h2><p><code>fieldset</code> can group the inputs and the <code>legend</code> is the description of <code>fieldset</code>.</p>
<h2 id="div-vs-span"><a href="#div-vs-span" class="headerlink" title="div vs span"></a><code>div</code> vs <code>span</code></h2><p><code>div</code> and <code>span</code> group elements into a block or inline element.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;padding-start-vs-padding-left&quot;&gt;&lt;a href=&quot;#padding-start-vs-padding-left&quot; class=&quot;headerlink&quot; title=&quot;padding-start vs padding-left&quot;&gt;&lt;/a&gt;padding-start vs padding-left&lt;/h2&gt;&lt;p&gt;I found the default style of &lt;code&gt;ol&lt;/code&gt; and &lt;code&gt;ul&lt;/code&gt; in Chrome have a interesting property &lt;code&gt;-webkit-padding-start: 40px;&lt;/code&gt;. I am wondering how is it different form &lt;code&gt;padding-left: 40px&lt;/code&gt;. According to &lt;a href=&quot;http://stackoverflow.com/questions/19582969/what-is-the-difference-between-padding-left-and-padding-start&quot;&gt;this&lt;/a&gt;, they are the same for the language written from left to right. If the language is written from right to left, the padding of &lt;code&gt;-webkit-padding-start: 40px;&lt;/code&gt; will move to right.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;dt&lt;/code&gt; is using margin instead of padding, because it does not need to put any bullet point into the component.&lt;/p&gt;
&lt;h2 id=&quot;Image’s-alt-attribute-vs-title&quot;&gt;&lt;a href=&quot;#Image’s-alt-attribute-vs-title&quot; class=&quot;headerlink&quot; title=&quot;Image’s alt attribute vs title&quot;&gt;&lt;/a&gt;Image’s &lt;code&gt;alt&lt;/code&gt; attribute vs &lt;code&gt;title&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;alt&lt;/code&gt; stands for alternative, which should be description of the image, because it will be shown when the image does not load. &lt;code&gt;title&lt;/code&gt; provides extra information of the image. For more detail, we can read &lt;a href=&quot;https://www.searchenginejournal.com/image-alt-text-vs-image-title-whats-the-difference/&quot;&gt;this&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Review" scheme="http://199911.github.io/categories/Review/"/>
    
    
  </entry>
  
  <entry>
    <title>Bootstrap 3 implementation demo</title>
    <link href="http://199911.github.io/diary/2016/09/11/bootstrap-3-implementation-demo/"/>
    <id>http://199911.github.io/diary/2016/09/11/bootstrap-3-implementation-demo/</id>
    <published>2016-09-10T16:00:00.000Z</published>
    <updated>2016-09-20T15:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spent almost 2 days on building this <a href="https://199911.github.io/bootstrap-3-implementation-demo/">page</a> to explain my learning and understanding on Bootstrap 3 implementation. Most of the time spent on thinking how to explain the logic in word.</p>
<p>There are lots of improvement in my writing skills. Although lots of time spent, it does help me to have a deeper understand on the idea.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spent almost 2 days on building this &lt;a href=&quot;https://199911.github.io/bootstrap-3-implementation-demo/&quot;&gt;page&lt;/a&gt; to explain my learning 
    
    </summary>
    
      <category term="Diary" scheme="http://199911.github.io/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>Learning from Bootstrap 3</title>
    <link href="http://199911.github.io/code/2016/09/01/bootstrap-3-learning/"/>
    <id>http://199911.github.io/code/2016/09/01/bootstrap-3-learning/</id>
    <published>2016-08-31T16:00:00.000Z</published>
    <updated>2016-09-01T14:30:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reset-script"><a href="#Reset-script" class="headerlink" title="Reset script"></a>Reset script</h2><p>Different browsers have different default style. To make the user experience consistent among browsers, we have CSS reset script or normalize script. In Bootstrap 3, <code>normalize.less</code> reset the CSS.</p>
<h2 id="HTML-accessibility"><a href="#HTML-accessibility" class="headerlink" title="HTML accessibility"></a>HTML accessibility</h2><p>Web page today have rich UI element. But for blind people, they use screen reader to read the page. They cannot understand image and icon. Bootstrap 3 provide <code>.sr-only</code> and <code>.sr-only-focusable</code> to show content to screen reader without affecting the visual content. <code>.sr-only-focusable</code> appears after the element focused by pressing the ‘tab’ key. Beside the Bootstrap 3 mixin, there are html attribute like <code>aria-label</code> for accessibility.</p>
<h2 id="LESS-function"><a href="#LESS-function" class="headerlink" title="LESS function"></a>LESS function</h2><p>In LESS, class and mixin share the same syntax. To hide the a mixin, we can add an empty parenthesis after the mixin, like <code>.mixin()</code>. This may create some code like <code>.mixin { .mixin() }</code>. It looks redundant, but it is good in design, as the interface and implementation are separated.</p>
<a id="more"></a>
<h2 id="touch-action"><a href="#touch-action" class="headerlink" title="touch-action"></a><code>touch-action</code></h2><p>There is a CSS property named <code>touch-action</code>, which can specify the behavior. I cannot understand the description on MDN, and I think this <a href="https://www.youtube.com/watch?v=NOzQlS6utRk" target="_blank" rel="external">video</a> can help.</p>
<h2 id="Spacing-the-items-inside-a-menu"><a href="#Spacing-the-items-inside-a-menu" class="headerlink" title="Spacing the items inside a menu"></a>Spacing the items inside a menu</h2><p>It is common to have a list of items in web. The html may looks like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;menu&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;menu-item&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;menu-item&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;menu-item&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>We usually want space between menu and items, also space among items. I implemented the LESS like<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.menu-item &#123;</span><br><span class="line">  margin-bottom: 20px;</span><br><span class="line">  &amp;:first &#123;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Bootstrap 3 introduce another implementation to me:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.menu &#123;</span><br><span class="line">  padding-top: 20px;</span><br><span class="line">  padding-bottom: 20px;</span><br><span class="line">  .menu-item + .menu-item &#123;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>I think this implementation is clearer, the padding of menu give space to the start and the end of menu. The <code>.menu-item + .menu-item</code> part gives space between the menu items.</p>
<h2 id="Component-animation"><a href="#Component-animation" class="headerlink" title="Component animation"></a>Component animation</h2><p>The class is well designed. For the fade in animation, <code>.fade</code> need to be added. The animation start when <code>.in</code> is added. The written code is very elegant, but the implementation may not be very trivial. We can refer to this file.</p>
<p>Bootstrap 3 only have fade in this pure CSS animation. Other component animation is implemented by both CSS and javascript. Need to read the javascript code to understand how to create animation.</p>
<h2 id="Technique-to-remove-double-border"><a href="#Technique-to-remove-double-border" class="headerlink" title="Technique to remove double border"></a>Technique to remove double border</h2><p>It is common to have button with border. But when there is a list of buttons, the two borders stick together and become a think border. It looks weird. We can remove the border for adjacent button, like <code>.btn + .btn { border-left: 0 }</code>. But Bootstrap 3 have another implementation, we can shift the border by 1 pixel to make the border overlap. This method works when the border color is not transparent. If the border color have alpha value, the border between buttons will have a deeper color.</p>
<h2 id="Component-content-and-component-part"><a href="#Component-content-and-component-part" class="headerlink" title="Component content and component part"></a>Component content and component part</h2><p>The dismissible alerts is a good example on implementation CSS component.</p>
<p>The html of dismissible like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;alert alert-warning alert-dismissible&quot;&gt;</span><br><span class="line">  &lt;button class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;</span><br><span class="line">    &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  Warning! Better check yourself, you&apos;re not looking too good.</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>It makes sense that considering all elements inside are children elements. But in <code>.alert</code>, the <code>.close</code> button is not the content of <code>.alert</code>, but part of it. Bootstrap 3 move the <code>.close</code> button from the ‘content’ to the ‘<code>.alert</code> div’. <code>.alert-dismissible</code> add <code>padding-right</code> into the <code>.alert</code> div. The <code>.close</code> button is moved to the <code>padding-right</code> by <code>right: -21px</code>, so the close button do not affect the content.</p>
<p>I am wondering why not using <code>margin-right: -21px</code>. One of the reason using <code>right</code> is keeping the ‘size’ of DOM.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Reset-script&quot;&gt;&lt;a href=&quot;#Reset-script&quot; class=&quot;headerlink&quot; title=&quot;Reset script&quot;&gt;&lt;/a&gt;Reset script&lt;/h2&gt;&lt;p&gt;Different browsers have different default style. To make the user experience consistent among browsers, we have CSS reset script or normalize script. In Bootstrap 3, &lt;code&gt;normalize.less&lt;/code&gt; reset the CSS.&lt;/p&gt;
&lt;h2 id=&quot;HTML-accessibility&quot;&gt;&lt;a href=&quot;#HTML-accessibility&quot; class=&quot;headerlink&quot; title=&quot;HTML accessibility&quot;&gt;&lt;/a&gt;HTML accessibility&lt;/h2&gt;&lt;p&gt;Web page today have rich UI element. But for blind people, they use screen reader to read the page. They cannot understand image and icon. Bootstrap 3 provide &lt;code&gt;.sr-only&lt;/code&gt; and &lt;code&gt;.sr-only-focusable&lt;/code&gt; to show content to screen reader without affecting the visual content. &lt;code&gt;.sr-only-focusable&lt;/code&gt; appears after the element focused by pressing the ‘tab’ key. Beside the Bootstrap 3 mixin, there are html attribute like &lt;code&gt;aria-label&lt;/code&gt; for accessibility.&lt;/p&gt;
&lt;h2 id=&quot;LESS-function&quot;&gt;&lt;a href=&quot;#LESS-function&quot; class=&quot;headerlink&quot; title=&quot;LESS function&quot;&gt;&lt;/a&gt;LESS function&lt;/h2&gt;&lt;p&gt;In LESS, class and mixin share the same syntax. To hide the a mixin, we can add an empty parenthesis after the mixin, like &lt;code&gt;.mixin()&lt;/code&gt;. This may create some code like &lt;code&gt;.mixin { .mixin() }&lt;/code&gt;. It looks redundant, but it is good in design, as the interface and implementation are separated.&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://199911.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>Implementation of Bootstrap 3 - mixins.less</title>
    <link href="http://199911.github.io/code/2016/08/28/bootstrap-3-mixins/"/>
    <id>http://199911.github.io/code/2016/08/28/bootstrap-3-mixins/</id>
    <published>2016-08-27T16:00:00.000Z</published>
    <updated>2016-10-02T11:59:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>mixins.less</code> contains utilities, components, skins and layout ‘functions’ of LESS.</p>
<h2 id="Utilities-Mixins"><a href="#Utilities-Mixins" class="headerlink" title="Utilities Mixins"></a>Utilities Mixins</h2><h3 id="mixins-hide-text-less"><a href="#mixins-hide-text-less" class="headerlink" title="mixins/hide-text.less"></a><code>mixins/hide-text.less</code></h3><p>It is used to hide the text in the dom. Why don’t we use <code>display: none</code> or <code>visible: hidden</code>? Because screen reader cannot read it. An <a href="https://github.com/twbs/bootstrap/issues/10076" target="_blank" rel="external">issue</a> on GitHub show a use case. Screen reader don’t have OCR and cannot read the text in image, we can put the image in background of an DOM, put the text inside the DOM. So screen reader can read it. To hide the text from other users, we can use the <code>.hide-text</code> mixin.</p>
<h3 id="mixins-opacity-less"><a href="#mixins-opacity-less" class="headerlink" title="mixins/opacity.less"></a><code>mixins/opacity.less</code></h3><p>It adds IE 8 support on <code>opacity</code>. If we don’t need to suppport IE 8, we can use the <code>opacify</code> directly.</p>
<a id="more"></a>
<h3 id="mixins-image-less"><a href="#mixins-image-less" class="headerlink" title="mixins/image.less"></a><code>mixins/image.less</code></h3><p>It has two mixins. The first one is for responsive image, which scale the image with ratio fixed.The second one <code>.img-retina(@file-1x; @file-2x; @width-1x; @height-1x)</code> is for retina image.</p>
<h4 id="Why-we-need-special-handle-on-retina-image"><a href="#Why-we-need-special-handle-on-retina-image" class="headerlink" title="Why we need special handle on retina image?"></a>Why we need special handle on retina image?</h4><p>From this <a href="https://www.sitepoint.com/css-techniques-for-retina-displays/" target="_blank" rel="external">article</a>, the term ‘pixel’ used in images and CSS have a subtle difference. The pixel of image is the smallest physical unit in a display, but the CSS pixel is an abstract unit which is device independent. Suppose we display a 200*200 image in physical pixel. The image is small on a screen with higher dpi, because the more pixel can be shown in the same area. If the image is in CSS pixel, the image size is the same in screen with any DPI.</p>
<p>Retina image is image with a high resolution, if we use CSS pixel, the image will be extremely large, which may break the page’s layout. Therefore we need to limit the size by parameter <code>@width-1x</code> and <code>@height-1x</code>. If the user don’t have a retina display, we don’t need to download and display the retina version of image (<code>@file-2x</code>), we can display a smaller image (<code>@file-1x</code>) with standard resolution.</p>
<h3 id="mixins-labels-less"><a href="#mixins-labels-less" class="headerlink" title="mixins/labels.less"></a><code>mixins/labels.less</code></h3><p>It is used to create labels with different color, we can use this to create custom labels easily. Should it be components mixin?</p>
<h3 id="mixins-reset-filter-less"><a href="#mixins-reset-filter-less" class="headerlink" title="mixins/reset-filter.less"></a><code>mixins/reset-filter.less</code></h3><p>It is used to remove the gradient background in IE 9 or below. Seem IE have some bugs on the gradient background, there are use cases on resetting the filter.</p>
<h3 id="mixins-responsive-visibility-less"><a href="#mixins-responsive-visibility-less" class="headerlink" title="mixins/responsive-visibility.less"></a><code>mixins/responsive-visibility.less</code></h3><p>It is for the visibility of <code>.visible-{screen size}</code>. Bootstrap 3 use <code>!important</code> in display property to override the <code>display: none;</code>. It sets <code>display: table !important;</code>, <code>display: table-row !important;</code> and <code>display: table-cell !important;</code> for table, tr, th and td. For other element, <code>display: block !important;</code>. So when applying visible class on table element or non-block elements, we need to use <code>.visible-{screen size}-block</code>, <code>.visible-{screen size}-inline</code> and <code>.visible-{screen size}-inline-block</code>.</p>
<h3 id="mixins-size-less"><a href="#mixins-size-less" class="headerlink" title="mixins/size.less"></a><code>mixins/size.less</code></h3><p>Having two mixin <code>size</code> and <code>square</code>, trivial.</p>
<h3 id="mixins-tab-focus-less"><a href="#mixins-tab-focus-less" class="headerlink" title="mixins/tab-focus.less"></a><code>mixins/tab-focus.less</code></h3><p>Adding outline to the button when using keyboard tab to focus.</p>
<h3 id="mixins-reset-text-less"><a href="#mixins-reset-text-less" class="headerlink" title="mixins/reset-text.less"></a><code>mixins/reset-text.less</code></h3><p>This mixin applied on tooltip and popover, because this element can be place in any place, the text style may be affect by the parent.</p>
<h3 id="mixins-text-emphasis-less"><a href="#mixins-text-emphasis-less" class="headerlink" title="mixins/text-emphasis.less"></a><code>mixins/text-emphasis.less</code></h3><p>This mixin is a helper function to set text color and hover color. It is used in <code>.text-{primary, success ...}</code> class.</p>
<h3 id="mixins-text-overflow-less"><a href="#mixins-text-overflow-less" class="headerlink" title="mixins/text-overflow.less"></a><code>mixins/text-overflow.less</code></h3><p>The file name explains itself. It configure <code>overflow</code>, <code>text-overflow</code> and <code>white-space</code> property</p>
<h3 id="mixins-vendor-prefixes-less"><a href="#mixins-vendor-prefixes-less" class="headerlink" title="mixins/vendor-prefixes.less"></a><code>mixins/vendor-prefixes.less</code></h3><p>The file name explain itself, but it is deprecated as there is a grunt module <code>Autoprefixer</code>. These depends on browsers’ implementation and will be updated from time to time, don’t spend too much time on reading it.</p>
<h2 id="Components-Mixins"><a href="#Components-Mixins" class="headerlink" title="Components Mixins"></a>Components Mixins</h2><p>For some components, the style on <code>:focus</code> and <code>:hover</code> are different. May research the user usability use case. Nothing special.</p>
<h2 id="Skins-Mixins"><a href="#Skins-Mixins" class="headerlink" title="Skins Mixins"></a>Skins Mixins</h2><p>Mixins for <code>background-color</code> hover effect, <code>border-radius</code> and gradient background.</p>
<h2 id="Layout-Mixins"><a href="#Layout-Mixins" class="headerlink" title="Layout Mixins"></a>Layout Mixins</h2><h3 id="mixins-clearfix-less"><a href="#mixins-clearfix-less" class="headerlink" title="mixins/clearfix.less"></a><code>mixins/clearfix.less</code></h3><p>For clearfix, we need to apply <code>clear: both;</code> in sibling element. But this mixin apply the style on <code>:after</code>, we can apply the <code>.clearfix</code> class on parent div, which is easier to maintain.</p>
<h3 id="mixins-center-block-less"><a href="#mixins-center-block-less" class="headerlink" title="mixins/center-block.less"></a><code>mixins/center-block.less</code></h3><p>Align a block element horizontal center.</p>
<h3 id="mixins-nav-vertical-align-less"><a href="#mixins-nav-vertical-align-less" class="headerlink" title="mixins/nav-vertical-align.less"></a><code>mixins/nav-vertical-align.less</code></h3><p>Align the element inside a nav bar by calculating margin top and bottom.</p>
<h3 id="mixins-grid-framework-less"><a href="#mixins-grid-framework-less" class="headerlink" title="mixins/grid-framework.less"></a><code>mixins/grid-framework.less</code></h3><p>It create the column class in grid system.</p>
<h3 id="mixins-grid-less"><a href="#mixins-grid-less" class="headerlink" title="mixins/grid.less"></a><code>mixins/grid.less</code></h3><p>Create the container, row, column push and pull class.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;mixins.less&lt;/code&gt; contains utilities, components, skins and layout ‘functions’ of LESS.&lt;/p&gt;
&lt;h2 id=&quot;Utilities-Mixins&quot;&gt;&lt;a href=&quot;#Utilities-Mixins&quot; class=&quot;headerlink&quot; title=&quot;Utilities Mixins&quot;&gt;&lt;/a&gt;Utilities Mixins&lt;/h2&gt;&lt;h3 id=&quot;mixins-hide-text-less&quot;&gt;&lt;a href=&quot;#mixins-hide-text-less&quot; class=&quot;headerlink&quot; title=&quot;mixins/hide-text.less&quot;&gt;&lt;/a&gt;&lt;code&gt;mixins/hide-text.less&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;It is used to hide the text in the dom. Why don’t we use &lt;code&gt;display: none&lt;/code&gt; or &lt;code&gt;visible: hidden&lt;/code&gt;? Because screen reader cannot read it. An &lt;a href=&quot;https://github.com/twbs/bootstrap/issues/10076&quot;&gt;issue&lt;/a&gt; on GitHub show a use case. Screen reader don’t have OCR and cannot read the text in image, we can put the image in background of an DOM, put the text inside the DOM. So screen reader can read it. To hide the text from other users, we can use the &lt;code&gt;.hide-text&lt;/code&gt; mixin.&lt;/p&gt;
&lt;h3 id=&quot;mixins-opacity-less&quot;&gt;&lt;a href=&quot;#mixins-opacity-less&quot; class=&quot;headerlink&quot; title=&quot;mixins/opacity.less&quot;&gt;&lt;/a&gt;&lt;code&gt;mixins/opacity.less&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;It adds IE 8 support on &lt;code&gt;opacity&lt;/code&gt;. If we don’t need to suppport IE 8, we can use the &lt;code&gt;opacify&lt;/code&gt; directly.&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://199911.github.io/categories/Code/"/>
    
    
  </entry>
  
</feed>
